<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="service-definition-3.xsd">

    <service verb="set" noun="Preference" allow-remote="true">
        <in-parameters>
            <parameter name="preferenceKey" required="true"/>
            <parameter name="preferenceValue"/>
        </in-parameters>
        <actions><script>ec.user.setPreference(preferenceKey, preferenceValue)</script></actions>
    </service>

    <service verb="create" noun="UserAccount" authenticate="anonymous-all" allow-remote="false">
        <in-parameters>
            <auto-parameters entity-name="moqui.security.UserAccount" include="nonpk"><exclude field-name="currentPassword"/>
                <exclude field-name="resetPassword"/><exclude field-name="passwordSalt"/><exclude field-name="passwordHashType"/>
                <exclude field-name="passwordBase64"/><exclude field-name="passwordSetDate"/><exclude field-name="hasLoggedOut"/>
                <exclude field-name="disabledDateTime"/><exclude field-name="successiveFailedLogins"/>
            </auto-parameters>
            <parameter name="username" required="true"/>
            <parameter name="newPassword" required="true"/>
            <parameter name="newPasswordVerify" required="true"/>
            <parameter name="requirePasswordChange" default-value="N"/>
            <parameter name="disabled" default-value="N"/>
            <parameter name="emailAddress"><text-email/></parameter>
        </in-parameters>
        <out-parameters><parameter name="userId" required="true"/></out-parameters>
        <actions>
            <!-- see if username already in use (instead of catching on unique index) -->
            <entity-find entity-name="moqui.security.UserAccount" list="existingUaList">
                <econdition field-name="username" ignore-case="true"/></entity-find>
            <if condition="existingUaList"><return error="true" message="Username [${username}] is already in use. Please choose another."/></if>

            <if condition="emailAddress">
                <!-- see if emailAddress already in use (instead of catching on unique index) -->
                <entity-find entity-name="moqui.security.UserAccount" list="existingUaList">
                    <econdition field-name="emailAddress" ignore-case="true"/></entity-find>
                <if condition="existingUaList"><return error="true" message="Email ${emailAddress} is already in use. Login with username ${existingUaList[0].username}"/></if>
            </if>

            <service-call name="create#moqui.security.UserAccount" out-map="context" in-map="context"/>
            <service-call name="org.moqui.impl.UserServices.update#PasswordInternal" out-map="updateOut"
                in-map="[userId:userId, newPassword:newPassword, newPasswordVerify:newPasswordVerify,
                    requirePasswordChange:requirePasswordChange]"/>
            <if condition="updateOut.updateSuccessful &amp;&amp; !ec.message.hasError()"><then>
                <message public="true" type="success">Account created with username ${username}</message>
            </then><else-if condition="updateOut.passwordIssues">
                <message public="true" type="danger">Because of password issues not creating account with username ${username}</message>
                <return error="true" message="Removed temporary account with username ${username} for password issues"/>
            </else-if></if>
        </actions>
    </service>
    <service verb="update" noun="UserAccount">
        <in-parameters>
            <parameter name="userId" required="true"/>
            <auto-parameters entity-name="moqui.security.UserAccount" include="nonpk">
                <exclude field-name="currentPassword"/><exclude field-name="resetPassword"/><exclude field-name="passwordSalt"/>
                <exclude field-name="passwordHashType"/><exclude field-name="passwordBase64"/><exclude field-name="passwordSetDate"/>
                <exclude field-name="hasLoggedOut"/><exclude field-name="disabledDateTime"/><exclude field-name="successiveFailedLogins"/></auto-parameters>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount"/>
            <if condition="userAccount == null"><return error="true" message="User Account not found for User ID ${userId}"/></if>

            <if condition="username &amp;&amp; username != userAccount.username">
                <!-- see if username already in use -->
                <entity-find entity-name="moqui.security.UserAccount" list="existingUaList">
                    <econdition field-name="username" ignore-case="true"/></entity-find>
                <if condition="existingUaList"><return error="true" message="Username [${username}] is already in use. Please choose another."/></if>
            </if>
            <if condition="emailAddress &amp;&amp; emailAddress != userAccount.emailAddress">
                <!-- see if emailAddress already in use (instead of catching on unique index) -->
                <entity-find entity-name="moqui.security.UserAccount" list="existingUaList">
                    <econdition field-name="emailAddress" ignore-case="true"/></entity-find>
                <if condition="existingUaList"><return error="true" message="Email ${emailAddress} is already in use. Login with username ${existingUaList[0].username}"/></if>
            </if>

            <service-call name="update#moqui.security.UserAccount" in-map="context"/>
        </actions>
    </service>

    <service verb="increment" noun="UserAccountFailedLogins" authenticate="anonymous-all" allow-remote="false">
        <in-parameters><parameter name="userId" required="true"/></in-parameters>
        <actions>
            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount"/>
            <set field="userAccount.successiveFailedLogins"
                 from="userAccount.successiveFailedLogins ? userAccount.successiveFailedLogins + 1 : 1"/>
            <set field="maxFailures" from="(ec.ecfi.confXmlRoot.first('user-facade').first('login').attribute('max-failures') ?: 3) as Integer"/>
            <!-- if successiveFailedLogins is greater than max in conf then disable account -->
            <if condition="userAccount.successiveFailedLogins > maxFailures &amp;&amp; userAccount.disabled != 'Y'">
                <set field="userAccount.disabled" value="Y"/>
                <set field="userAccount.disabledDateTime" from="ec.user.nowTimestamp"/>
            </if>
            <log level="warn" message="User ${userId} failed logins [${userAccount.successiveFailedLogins}], maxFailures [${maxFailures}], disabled [${userAccount.disabled}]"/>
            <entity-update value-field="userAccount"/>
        </actions>
    </service>

    <service verb="update" noun="Password" authenticate="anonymous-all" allow-remote="true">
        <description>Set a user's password. The userId must match the current user and the oldPassword must match the
            user's currentPassword or special permission is required, or user has already pre-authenticated and specified an authz code.</description>
        <in-parameters>
            <parameter name="userId"><description>Defaults to the current userId in the ExecutionContext.</description></parameter>
            <parameter name="username"><description>May be used instead of userId to identify user.</description></parameter>
            <parameter name="oldPassword" required="true"><description>Ignored if user has password admin permissions.</description></parameter>
            <parameter name="newPassword" required="true"/>
            <parameter name="newPasswordVerify" required="true"/>
            <parameter name="code"><description>Second factor authentication, required if second factor required for user (via group or authc factors configured)</description></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="username"/>
            <parameter name="passwordIssues" type="Boolean"/>
            <parameter name="updateSuccessful" type="Boolean"/>
        </out-parameters>
        <actions>
            <set field="hasPwAdminPermission" from="ec.user.hasPermission('ADMIN_PASSWORD')"/>
            <set field="passwordIssues" from="false"/>
            <set field="updateSuccessful" from="false"/>

            <if condition="userId"><then>
                <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount"/>
            </then><else-if condition="username">
                <!-- NOTE: not using ignore-case here, for PW update required exact username match -->
                <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount">
                    <field-map field-name="username"/></entity-find-one>
            </else-if><else>
                <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount">
                    <field-map field-name="userId" from="ec.user.userId"/></entity-find-one>
            </else></if>
            <if condition="userAccount == null"><return message="Could not find user with name ${username}" public="true" type="danger"/></if>
            <set field="userId" from="userAccount.userId"/>
            <set field="username" from="userAccount.username"/>

            <if condition="!hasPwAdminPermission">
                <if condition="ec.user.userId &amp;&amp; userId != ec.user.userId">
                    <return message="Cannot update the password of another user without password admin permission" public="true" type="danger"/></if>

                <!--
                - if code verified and pre-auth don't require oldPassword
                - if oldPassword and code check oldPassword first, if wrong don't want to check code (might use up single use code)
                approach: if pre-auth and code specified check code first, otherwise check after oldPassword
                -->
                <!-- see if a second authc factor is required for this user, if so require authc code to update password -->
                <service-call name="org.moqui.impl.UserServices.get#UserAuthcFactorRequired" out-map="context">
                    <field-map field-name="userId"/></service-call>
                <set field="codeVerified" from="false"/>
                <if condition="secondFactorRequired">
                    <!-- NOTE: don't check for missing code here, do that after oldPassword verify so if it verifies we can pre-auth -->
                    <!-- if pre-auth and code specified check code first, otherwise check after oldPassword -->
                    <if condition="ec.web?.sessionAttributes?.moquiPreAuthcUsername || ec.user.username">
                        <service-call name="org.moqui.impl.UserServices.validate#UserAuthcFactorCode"
                                in-map="[userId:userId, code:code]" out-map="validateCodeOut"/>
                        <if condition="!validateCodeOut.verified">
                            <return message="Authentication code not valid" public="true" type="danger"/></if>
                        <set field="codeVerified" from="true"/>
                    </if>
                </if>

                <!-- compare the passwords, encrypted, skip in special case for pre-auth user if a second factor required -->
                <!-- codeVerified is only true if user pre-auth'ed and code verified above -->
                <if condition="!codeVerified">
                    <if condition="!oldPassword">
                        <return message="Please enter current password" public="true" type="danger"/></if>

                    <script>
                        def token = new org.apache.shiro.authc.UsernamePasswordToken((String) userAccount.username, (String) oldPassword)
                        def info = new org.apache.shiro.authc.SimpleAuthenticationInfo(userAccount.username, userAccount.currentPassword,
                                userAccount.passwordSalt ? new org.apache.shiro.util.SimpleByteSource((String) userAccount.passwordSalt) : null, "moquiRealm")
                    </script>
                    <if condition="!userAccount.currentPassword || !ec.ecfi.getCredentialsMatcher(userAccount.passwordHashType, 'Y'.equals(userAccount.passwordBase64)).doCredentialsMatch(token, info)">
                        <if condition="userAccount.resetPassword"><then>
                            <!-- try the resetPassword -->
                            <script>
                                info = new org.apache.shiro.authc.SimpleAuthenticationInfo(userAccount.username, userAccount.resetPassword,
                                        userAccount.passwordSalt ? new org.apache.shiro.util.SimpleByteSource((String) userAccount.passwordSalt) : null, "moquiRealm")
                            </script>
                            <if condition="!ec.ecfi.getCredentialsMatcher(userAccount.passwordHashType, 'Y'.equals(userAccount.passwordBase64)).doCredentialsMatch(token, info)">
                                <return message="Password did not match current password or reset password for user ${username}" public="true" type="danger"/></if>
                        </then><else>
                            <return message="Password incorrect for user ${username}" public="true" type="danger"/>
                        </else></if>
                    </if>

                    <if condition="secondFactorRequired">
                        <if condition="!code">
                            <!-- at this point oldPassword verified but no code specified, so pre-auth so they don't have to specify oldPassword again -->
                            <if condition="ec.web?.sessionAttributes">
                                <set field="ec.web?.sessionAttributes?.moquiPreAuthcUsername" from="username"/>
                                <!-- TODO: consider calling internalLoginUser for other logic like maybe pw change required or pw expired, etc... -->
                            </if>
                            <return message="Authentication code required for user ${username}" public="true" error="true"/>
                        </if>

                        <service-call name="org.moqui.impl.UserServices.validate#UserAuthcFactorCode"
                                in-map="[userId:userId, code:code]" out-map="validateCodeOut"/>
                        <if condition="!validateCodeOut.verified">
                            <return message="Authentication code not valid" public="true" type="danger"/></if>
                    </if>
                </if>
            </if>

            <service-call name="org.moqui.impl.UserServices.update#PasswordInternal" out-map="context"
                    in-map="[userId:userId, newPassword:newPassword, newPasswordVerify:newPasswordVerify]"/>
            <if condition="updateSuccessful &amp;&amp; !ec.message.hasError()">
                <message public="true" type="success">Password updated for user ${userAccount.username}</message></if>
        </actions>
    </service>
    <service verb="update" noun="PasswordInternal" authenticate="false" allow-remote="false">
        <in-parameters>
            <parameter name="userId" required="true"/>
            <parameter name="newPassword" required="true"/>
            <parameter name="newPasswordVerify" required="true"/>
            <parameter name="requirePasswordChange" default-value="N"/>
        </in-parameters>
        <out-parameters>
            <parameter name="passwordIssues" type="Boolean"/>
            <parameter name="updateSuccessful" type="Boolean"/>
        </out-parameters>
        <actions>
            <set field="passwordIssues" from="false"/>
            <set field="updateSuccessful" from="false"/>
            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount"/>
            <if condition="userAccount == null">
                <return message="Cannot update password, Account not found with ID ${userId}" public="true" type="danger"/></if>

            <!-- check a bunch of stuff about the new password -->
            <set field="passwordNode" from="ec.ecfi.confXmlRoot.first('user-facade').first('password')"/>

            <if condition="newPassword != newPasswordVerify">
                <message public="true" type="danger">New Password and New Password Verify do not match</message>
                <set field="passwordIssues" from="true"/>
            </if>

            <set field="minLength" from="passwordNode.attribute('min-length')" default-value="8" type="Integer"/>
            <if condition="newPassword.length() &lt; minLength">
                <message public="true" type="warning">Password shorter than ${minLength} characters</message>
                <set field="passwordIssues" from="true"/>
            </if>

            <set field="minDigits" from="passwordNode.attribute('min-digits')" default-value="1" type="Integer"/>
            <set field="digits" from="countChars(newPassword, true, false, false)"/>
            <if condition="digits &lt; minDigits">
                <message public="true" type="warning">Password needs ${minDigits} digit/number characters</message>
                <set field="passwordIssues" from="true"/>
            </if>

            <set field="minOthers" from="passwordNode.attribute('min-others')" default-value="1" type="Integer"/>
            <set field="others" from="countChars(newPassword, false, false, true)"/>
            <if condition="others &lt; minOthers">
                <message public="true" type="warning">Password needs ${minOthers} other characters (not letter or digit)</message>
                <set field="passwordIssues" from="true"/>
            </if>

            <!-- don't log this by default, security hole: <log level="info" message="newPassword=${newPassword}, length=${newPassword.length()}, digits=${digits}, others=${others}"/> -->

            <!-- if password is same as current don't allow it -->
            <set field="hashedNewPassword" from="ec.ecfi.getSimpleHash(newPassword, userAccount.passwordSalt, userAccount.passwordHashType, 'Y'.equals(userAccount.passwordBase64))"/>
            <!-- <log level="warn" message="cur ${userAccount.currentPassword} : new ${hashedNewPassword}"/> -->
            <if condition="userAccount.currentPassword == hashedNewPassword">
                <message public="true" type="danger">New password is same as current password</message>
                <set field="passwordIssues" from="true"/>
            </if>

            <!-- if password is in the history don't allow it -->
            <set field="historyLimit" from="passwordNode.attribute('history-limit')" default-value="5" type="Integer"/>
            <entity-find entity-name="moqui.security.UserPasswordHistory" list="duplicateUserPasswordHistoryList">
                <econdition field-name="userId" from="userId"/>
                <!-- can't query by this field since it is encrypted: <econdition field-name="password" from="newPassword"/> -->
            </entity-find>
            <iterate list="duplicateUserPasswordHistoryList" entry="duplicateUserPasswordHistory">
                <set field="hashedNewPassword" from="ec.ecfi.getSimpleHash(newPassword, duplicateUserPasswordHistory.passwordSalt, duplicateUserPasswordHistory.passwordHashType, 'Y'.equals(userAccount.passwordBase64))"/>
                <if condition="duplicateUserPasswordHistory.password == hashedNewPassword">
                    <message public="true" type="warning">Password was used in last ${historyLimit} passwords</message>
                    <set field="passwordIssues" from="true"/>
                </if>
            </iterate>

            <if condition="passwordIssues"><return error="true" message="Found issues with password so not updating"/></if>
            <!-- from here on the newPassword is considered okay -->

            <!-- save history, then while more in history than password.@history-limit default 5 then remove oldest -->
            <service-call name="create#moqui.security.UserPasswordHistory"
                    in-map="[userId:userId, password:userAccount.currentPassword, passwordSalt:userAccount.passwordSalt,
                        passwordHashType:userAccount.passwordHashType, fromDate:ec.user.nowTimestamp]"/>
            <entity-find entity-name="moqui.security.UserPasswordHistory" list="existingUserPasswordHistoryList">
                <econdition field-name="userId" from="userId"/>
                <order-by field-name="fromDate"/>
            </entity-find>
            <while condition="existingUserPasswordHistoryList.size() &gt; historyLimit">
                <entity-delete value-field="existingUserPasswordHistoryList.remove(0)"/>
            </while>

            <!-- encrypt password (using password.@encrypt-hash-type default SHA-256) and save -->
            <set field="salt" from="ec.ecfi.randomSalt"/>
            <service-call name="update#moqui.security.UserAccount">
                <field-map field-name="userId"/>
                <field-map field-name="currentPassword" from="ec.ecfi.getSimpleHash(newPassword, salt)"/>
                <field-map field-name="passwordSalt" from="salt"/>
                <field-map field-name="passwordHashType" from="ec.ecfi.passwordHashType"/>
                <field-map field-name="passwordBase64" value="N"/>
                <field-map field-name="passwordSetDate" from="ec.user.nowTimestamp"/>
                <field-map field-name="requirePasswordChange"/>
                <field-map field-name="resetPassword" from="null"/>
                <field-map field-name="disabled" value="N"/>
            </service-call>
            <set field="updateSuccessful" from="true"/>
        </actions>
    </service>

    <service verb="enable" noun="UserAccount">
        <description>Enable a disabled account (set disabled=N, disabledDateTime=null, successiveFailedLogins=0)</description>
        <in-parameters><parameter name="userId" required="true"/></in-parameters>
        <actions>
            <service-call name="update#moqui.security.UserAccount"
                    in-map="[userId:userId, disabled:'N', disabledDateTime:null, successiveFailedLogins:0]"/>
        </actions>
    </service>
    <service verb="disable" noun="UserAccount">
        <description>Disable an account (set disabled=Y, disabledDateTime=now)</description>
        <in-parameters><parameter name="userId" required="true"/></in-parameters>
        <actions>
            <!-- set disabledDateTime to null so that account is permanently disabled (won't auto enable after wait period) -->
            <service-call name="update#moqui.security.UserAccount" in-map="[userId:userId, disabled:'Y', disabledDateTime:null]"/>
        </actions>
    </service>
    <service verb="reset" noun="Password" authenticate="anonymous-all" allow-remote="true">
        <in-parameters>
            <parameter name="userId"/>
            <parameter name="username"><description>May be used instead of userId to identify user.</description></parameter>
            <parameter name="bodyParameters" type="Map" default="[:]"/>
            <parameter name="emailTemplateId" default-value="PASSWORD_RESET"/>
        </in-parameters>
        <actions>
            <!-- find by userId -->
            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount" for-update="true"/>
            <if condition="userAccount == null">
                <!-- find by username, no ignore-case here to require exact match for PW reset -->
                <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount" for-update="true">
                    <field-map field-name="username"/></entity-find-one>
            </if>
            <if condition="userAccount == null">
                <!-- find by emailAddress in case it was entered instead of username -->
                <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount" for-update="true">
                    <field-map field-name="emailAddress" from="username"/></entity-find-one>
            </if>
            <if condition="userAccount == null">
                <message public="true" type="danger">Could not find account with username or email address ${username}</message>
                <return error="true" message="Account not found"/>
            </if>
            <if condition="!userAccount.emailAddress">
                <message public="true" type="danger">Account with username ${username} does not have an email address</message>
                <return error="true" message="Account has no email address"/>
            </if>

            <!-- reset the password to a random value -->
            <set field="resetPassword" from="getRandomString(12)"/>
            <set field="passwordNode" from="ec.ecfi.confXmlRoot.first('user-facade').first('password')"/>
            <set field="userAccount.resetPassword" from="ec.ecfi.getSimpleHash(resetPassword, userAccount.passwordSalt, userAccount.passwordHashType, 'Y'.equals(userAccount.passwordBase64))"/>
            <set field="userAccount.requirePasswordChange" from="(passwordNode.attribute('email-require-change') == 'true') ? 'Y' : 'N'"/>
            <entity-update value-field="userAccount"/>

            <!-- send an email with the new password -->
            <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" async="true">
                <field-map field-name="emailTemplateId"/>
                <field-map field-name="toAddresses" from="userAccount.emailAddress"/>
                <field-map field-name="bodyParameters" from="bodyParameters + [userAccount:userAccount, resetPassword:resetPassword]"/>
            </service-call>
            <message public="true" type="success">A reset password was sent by email to ${userAccount.emailAddress}. This password may only be used to change your password. Your current password is still valid.</message>
            <if condition="userAccount.requirePasswordChange == 'Y'"><message public="true" type="info">You must change your password before login.</message></if>
        </actions>
    </service>

    <service verb="create" noun="InitialAdminAccount" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="username" required="true"/>
            <parameter name="newPassword" required="true"/>
            <parameter name="newPasswordVerify" required="true"/>
            <parameter name="userFullName"/>
            <parameter name="emailAddress"><text-email/></parameter>
        </in-parameters>
        <out-parameters><parameter name="userId" required="true"/></out-parameters>
        <actions>
            <!-- only allow this if there are no user accounts, other than the _NA_ UserAccount which is in seed data -->
            <if condition="ec.entity.find('moqui.security.UserAccount').count() > 1">
                <return error="true" message="Can only create initial admin account if there are no UserAccount records"/></if>
            <service-call name="org.moqui.impl.UserServices.create#UserAccount" in-map="context" out-map="context"/>
            <service-call name="create#moqui.security.UserGroupMember" in-map="[userId:userId, userGroupId:'ADMIN']"/>
        </actions>
    </service>

    <!-- ================================================= -->
    <!-- ====== User Authentication Factor Services ====== -->
    <!-- ================================================= -->

    <service verb="get" noun="ExternalUserAuthcFactorInfo" authenticate="anonymous-view">
        <out-parameters>
            <parameter name="secondFactorRequired" type="Boolean"/>
            <parameter name="factorTypeEnumIds" type="Set"/>
            <parameter name="factorTypeDescriptions" type="List"/>
            <parameter name="sendableFactors" type="List"><parameter name="sendableFactor" type="Map">
                <parameter name="factorId"/>
                <parameter name="factorTypeEnumId"/>
                <parameter name="factorOption"/>
            </parameter></parameter>
        </out-parameters>
        <actions>
            <set field="username" from="ec.web?.sessionAttributes?.moquiPreAuthcUsername ?: ec.user.username"/>
            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount">
                <field-map field-name="username"/></entity-find-one>
            <if condition="userAccount == null"><return error="true" message="No user pre-authenticated"/></if>

            <service-call name="org.moqui.impl.UserServices.get#UserAuthcFactorInfo" out-map="context">
                <field-map field-name="userId" from="userAccount.userId"/></service-call>
        </actions>
    </service>
    <service verb="get" noun="UserAuthcFactorInfo">
        <in-parameters>
            <parameter name="userId" required="true"/>
            <parameter name="getFactorsIfNotRequired" type="Boolean" default="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="secondFactorRequired" type="Boolean"/>
            <parameter name="factorTypeEnumIds" type="Set"/>
            <parameter name="factorTypeDescriptions" type="List"/>
            <parameter name="sendableFactors" type="List"><parameter name="sendableFactor" type="Map">
                <parameter name="factorId"/>
                <parameter name="factorTypeEnumId"/>
                <parameter name="factorOption"/>
            </parameter></parameter>
        </out-parameters>
        <actions>
            <service-call name="org.moqui.impl.UserServices.get#UserAuthcFactorRequired" out-map="context">
                <field-map field-name="userId"/></service-call>

            <!-- getFactorsIfNotRequired supported here, return now if false AND secondFactorRequired is false -->
            <if condition="!getFactorsIfNotRequired &amp;&amp; !secondFactorRequired">
                <return/></if>

            <entity-find entity-name="moqui.security.UserAuthcFactor" list="userAuthcFactorList">
                <date-filter/><econdition field-name="userId"/>
                <econdition field-name="fromFactorId" operator="is-null"/>
                <!-- was condition in post-find iterate: userAuthcFactor.factorTypeEnumId != UafSingleUse &amp;&amp; !userAuthcFactor.fromFactorId -->
            </entity-find>

            <!-- if user has no authc factors configured allow code via UserAccount.emailAddress -->
            <!-- NOTE: org.moqui.impl.UserServices.send#AuthcCode looks for a special factorId of 'UserAccountEmail' for this purpose -->
            <if condition="userAuthcFactorList.size() == 0">
                <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount"/>
                <if condition="userAccount?.emailAddress">
                    <set field="userAuthcFactorList" from="[[factorId:'UserAccountEmail', userId:userId,
                            factorTypeEnumId:'UafEmail', factorOption:userAccount.emailAddress]]"/>
                </if>
            </if>

            <set field="factorTypeEnumIds" from="new TreeSet(userAuthcFactorList*.factorTypeEnumId)"/>
            <set field="factorTypeDescriptions" from="new LinkedList(factorTypeEnumIds.collect({
                ec.entity.find('moqui.basic.Enumeration').condition('enumId', it).one()?.description ?: it }))"/>

            <set field="sendableFactors" from="[]"/>
            <iterate list="userAuthcFactorList" entry="factor">
                <if condition="factor.factorTypeEnumId in ['UafEmail', 'UafSms']">
                    <script>sendableFactors.add([factorId:factor.factorId, factorTypeEnumId:factor.factorTypeEnumId,
                                                 factorOption:factor.factorOption])</script>
                </if>
            </iterate>
        </actions>
    </service>
    <service verb="get" noun="UserAuthcFactorRequired" authenticate="false">
        <!-- NOTE: has authenticate="false" for use in MoquiShiroRealm during login, not anonymous-view/-all to not open it up that much -->
        <description>This service is the definition of when a 2nd factor is required for a user, used in MoquiShiroRealm and elsewhere</description>
        <in-parameters><parameter name="userId" required="true"/></in-parameters>
        <out-parameters><parameter name="secondFactorRequired" type="Boolean"/></out-parameters>
        <actions>
            <entity-find-count entity-name="moqui.security.UserAuthcFactor" count-field="uafCount">
                <date-filter/><econdition field-name="userId"/></entity-find-count>
            <if condition="uafCount == 0"><then>
                <entity-find-count entity-name="moqui.security.UserGroup" count-field="userGroupCount">
                    <econdition field-name="userGroupId" operator="in" from="ec.user.getUserGroupIdSet(userId)"/>
                    <econdition field-name="requireAuthcFactor" value="Y"/>
                </entity-find-count>
                <set field="secondFactorRequired" from="userGroupCount &gt; 0"/>
            </then><else>
                <set field="secondFactorRequired" from="true"/>
            </else></if>
        </actions>
    </service>

    <service verb="validate" noun="ExternalUserAuthcCode" authenticate="anonymous-all">
        <in-parameters><parameter name="code" required="true"/></in-parameters>
        <out-parameters>
            <parameter name="verified" type="Boolean"/>
            <parameter name="factorId"/>
            <parameter name="username"/>
        </out-parameters>
        <actions>
            <set field="username" from="ec.web.sessionAttributes.moquiPreAuthcUsername"/>
            <if condition="!username"><return error="true" message="No user pre-authenticated, cannot send code"/></if>

            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount">
                <field-map field-name="username"/></entity-find-one>
            <if condition="userAccount == null"><return error="true" message="User ${username} not found"/></if>

            <service-call name="org.moqui.impl.UserServices.validate#UserAuthcFactorCode"
                    in-map="[userId:userAccount.userId, code:code]" out-map="context"/>
        </actions>
    </service>
    <service verb="validate" noun="UserAuthcFactorCode">
        <!-- TODO: Limit the amount of attempts to validate authc code. Similar to Tarpit Locks. -->
        <description>Determine whether a user inputted code is valid based on the current UserAuthcFactor entries for that user.</description>
        <in-parameters>
            <parameter name="userId" required="true"/>
            <parameter name="code" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="verified" type="Boolean"/>
            <parameter name="factorId"/>
        </out-parameters>
        <actions>
            <set field="verified" from="false"/>

            <!-- This is the setup script for verifying TOTP codes with the samstevens library. -->
            <script>
                import dev.samstevens.totp.time.*
                import dev.samstevens.totp.code.*
                TimeProvider timeProvider = new SystemTimeProvider()
                CodeGenerator codeGenerator = new DefaultCodeGenerator()
                CodeVerifier verifier = new DefaultCodeVerifier(codeGenerator, timeProvider)
            </script>

            <entity-find entity-name="moqui.security.UserAuthcFactor" list="userAuthcFactorList">
                <date-filter/>
                <econdition field-name="userId"/>
                <econdition field-name="factorTypeEnumId" operator="not-equals" value="UafEmail"/>
            </entity-find>

            <iterate list="userAuthcFactorList" entry="userAuthcFactor">
                <if condition="userAuthcFactor.factorTypeEnumId == 'UafSingleUse'">
                    <then>
                        <!-- This checks to see whether the hashed single use code in the database is the input code hashed. -->
                        <if condition="userAuthcFactor.factorOption == ec.ecfi.getSimpleHash(code, 'SaltySalt')">
                            <set field="factorId" from="userAuthcFactor.factorId"/>
                            <set field="verified" from="true"/>
                            <service-call name="update#moqui.security.UserAuthcFactor" in-map="[factorId:userAuthcFactor.factorId,thruDate:ec.user.nowTimestamp]"/>
                            <if condition="userAuthcFactor.fromFactorId"><service-call name="update#moqui.security.UserAuthcFactor" in-map="[factorId:userAuthcFactor.fromFactorId,needsValidation:'N']"/></if>
                        </if>
                    </then>
                    <else-if condition="userAuthcFactor.factorTypeEnumId == 'UafTotp'">
                        <!-- This checks to see whether the secret key stored in the database matches the input code at this time -->
                        <if condition="verifier.isValidCode(userAuthcFactor.factorOption, code)">
                            <set field="factorId" from="userAuthcFactor.factorId"/>
                            <set field="verified" from="true"/>
                            <service-call name="update#moqui.security.UserAuthcFactor" in-map="[factorId:userAuthcFactor.factorId,needsValidation:'N']"/>
                        </if>
                    </else-if>
                </if>
            </iterate>
        </actions>
    </service>

    <service verb="create" noun="SingleUseAuthcCodes">
        <description>Create multiple single use authentication factors.</description>
        <in-parameters>
            <parameter name="userId" required="true"/>
            <parameter name="fromFactorId" default=""/>
            <parameter name="thruDate" type="Timestamp" default="ec.user.nowTimestamp + 365"/>
            <parameter name="numberOfCodes" type="Integer" default="6"/>
        </in-parameters>
        <out-parameters><parameter name="singleUseCodes" type="List"/></out-parameters>
        <actions>
            <if condition="numberOfCodes &gt; 21"><return error="true" message="Cannot create more than 21 codes at a time"/></if>
            <set field="factorTypeEnumId" value="UafSingleUse"/>
            <set field="fromDate" from="ec.user.nowTimestamp"/>
            <entity-find entity-name="moqui.security.UserAuthcFactor" list="userAuthcFactorList">
                <date-filter/>
                <econdition field-name="userId"/>
                <econdition field-name="fromFactorId"/>
                <econdition field-name="factorTypeEnumId" value="UafSingleUse"/>
            </entity-find>

            <!-- This automatically invalidates any current single use authentication codes that are from the fromFactorId -->
            <iterate list="userAuthcFactorList" entry="userAuthcFactor">
                <service-call name="update#moqui.security.UserAuthcFactor"
                        in-map="[factorId:userAuthcFactor.factorId, thruDate:ec.user.nowTimestamp]"/>
            </iterate>
            <set field="singleUseCodes" from="[]"/>

            <!-- This generates the actual codes using java's SecureRandom library (currently 8 integer digits) -->
            <script>
                for (int i = 0; i &lt; numberOfCodes; i++)
                    singleUseCodes.add(new java.security.SecureRandom().nextInt(99999999).toString().padLeft(8,'0'))
            </script>
            <iterate list="singleUseCodes" entry="code">
                <set field="factorOption" from="ec.ecfi.getSimpleHash(code, 'SaltySalt')"/>
                <service-call name="create#moqui.security.UserAuthcFactor" in-map="context"/>
            </iterate>
        </actions>
    </service>
    <service verb="create" noun="SingleUseAuthcFactor">
        <description>Create a single use authentication factor.</description>
        <in-parameters>
            <parameter name="userId" required="true"/>
            <parameter name="fromFactorId"/>
            <parameter name="thruDate" type="Timestamp" default="ec.user.nowTimestamp + 1"/>
        </in-parameters>
        <out-parameters>
            <parameter name="factorId"/>
            <parameter name="code"/>
            <parameter name="thruDate"/>
        </out-parameters>
        <actions>
            <!-- If there is a fromFactorId, this automatically invalidates any current single use authentication codes that are from the fromFactorId -->
            <if condition="fromFactorId">
                <entity-find entity-name="moqui.security.UserAuthcFactor" list="userAuthcFactorList">
                    <date-filter/><econdition field-name="userId"/><econdition field-name="fromFactorId"/>
                    <econdition field-name="factorTypeEnumId" value="UafSingleUse"/></entity-find>
                <iterate list="userAuthcFactorList" entry="userAuthcFactor">
                    <service-call name="update#moqui.security.UserAuthcFactor" in-map="[factorId:userAuthcFactor.factorId, thruDate:ec.user.nowTimestamp]"/>
                </iterate>
            </if>

            <set field="factorTypeEnumId" value="UafSingleUse"/>
            <set field="fromDate" from="ec.user.nowTimestamp"/>
            <set field="code" from="new java.security.SecureRandom().nextInt(999999).toString().padLeft(6,'0')"/>
            <set field="factorOption" from="ec.ecfi.getSimpleHash(code, 'SaltySalt')"/>
            <service-call name="create#moqui.security.UserAuthcFactor" in-map="context" out-map="context"/>
        </actions>
    </service>

    <service verb="send" noun="ExternalAuthcCode" authenticate="anonymous-all">
        <description>Send authentication code for the factorId, looks up service to use based on factorTypeEnumId</description>
        <in-parameters><parameter name="factorId" required="true"/></in-parameters>
        <out-parameters>
            <parameter name="singleUseFactorId"/>
            <!-- this service is for external use, don't return the code: <parameter name="code"/> -->
        </out-parameters>
        <actions>
            <set field="username" from="ec.web?.sessionAttributes?.moquiPreAuthcUsername ?: ec.user.username"/>
            <if condition="!username"><return error="true" message="No user pre-authenticated, cannot send code"/></if>
            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount">
                <field-map field-name="username"/></entity-find-one>
            <if condition="userAccount == null"><return error="true" message="User ${username} not found"/></if>

            <!-- special case for email OTP with UserAccount.emailAddress -->
            <if condition="'UserAccountEmail'.equals(factorId)">
                <entity-find entity-name="moqui.security.UserAuthcFactor" list="userAuthcFactorList">
                    <date-filter/><econdition field-name="userId" from="userAccount.userId"/>
                    <econdition field-name="fromFactorId" operator="is-null"/>
                </entity-find>
                <if condition="userAuthcFactorList">
                    <return error="true" message="User has other authentication factors configured, cannot use account email address"/></if>

                <service-call name="org.moqui.impl.UserServices.send#AuthcCodeUserAccountEmail"
                        in-map="[username:username]" out-map="context"/>
                <return/>
            </if>

            <entity-find-one entity-name="moqui.security.UserAuthcFactor" value-field="userAuthcFactor">
                <field-map field-name="factorId"/></entity-find-one>
            <if condition="userAuthcFactor == null"><return error="true" message="Authentication factor ${factorId} not found"/></if>
            <if condition="userAuthcFactor.userId != userAccount.userId">
                <return error="true" message="Authentication Factor ${factorId} is not valid for ${userAccount.username}"/></if>

            <if condition="userAuthcFactor.factorTypeEnumId == 'UafEmail'"><then>
                <service-call name="org.moqui.impl.UserServices.send#AuthcCodeEmail" in-map="[factorId:factorId]" out-map="context"/>
            </then><else-if condition="userAuthcFactor.factorTypeEnumId == 'UafSms'">
                <service-call name="org.moqui.impl.UserServices.send#AuthcCodeSms" in-map="[factorId:factorId]" out-map="context"/>
            </else-if><else>
                <return error="true" message="Send code not supported for authc factor type ${userAuthcFactor.factorTypeEnumId}"/>
            </else></if>
        </actions>
    </service>
    <service verb="send" noun="AuthcCodeEmail">
        <description>
            For public access (outside an admin app) this should be called from send#AuthcCode which does validation,
                including verifying factor is owned by authc username in session.
            Service to send an email with a single use code in it for verifying an email.
        </description>
        <in-parameters><parameter name="factorId" required="true"/></in-parameters>
        <out-parameters>
            <parameter name="singleUseFactorId"/>
            <parameter name="code"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="moqui.security.UserAuthcFactor" value-field="userAuthcFactor">
                <field-map field-name="factorId"/></entity-find-one>
            <set field="userId" from="userAuthcFactor.userId"/>
            <set field="emailAddress" from="userAuthcFactor.factorOption"/>

            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount">
                <field-map field-name="userId"/></entity-find-one>

            <!-- create a new single use authc factor code and get it's factorId -->
            <service-call name="org.moqui.impl.UserServices.create#SingleUseAuthcFactor"
                    in-map="[userId:userId, fromFactorId:factorId]" out-map="createSuFactorOut"/>
            <set field="singleUseFactorId" from="createSuFactorOut.factorId"/>

            <!-- send an email with the single use code -->
            <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" async="true">
                <field-map field-name="emailTemplateId" value="SINGLE_USE_CODE"/>
                <field-map field-name="toAddresses" from="emailAddress"/>
                <field-map field-name="bodyParameters" from="[code:createSuFactorOut.code,
                        thruDateString:ec.l10n.format(createSuFactorOut.thruDate, null)]"/>
            </service-call>
            <message>Authentication code sent to ${emailAddress}</message>

            <!-- if the email just sent to is not the main email address for the user send the main email address a notification email that an email with a code was sent -->
            <if condition="userAccount.emailAddress &amp;&amp; userAccount.emailAddress != emailAddress">
                <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" async="true">
                    <field-map field-name="emailTemplateId" value="ADDED_EMAIL_AUTHC_FACTOR"/>
                    <field-map field-name="toAddresses" from="userAccount.emailAddress"/>
                    <field-map field-name="bodyParameters" from="[userEmail:emailAddress,
                            thruDateString:ec.l10n.format(createSuFactorOut.thruDate, null)]"/>
                </service-call>
            </if>
        </actions>
    </service>
    <service verb="send" noun="AuthcCodeUserAccountEmail">
        <in-parameters><parameter name="username" required="true"/></in-parameters>
        <out-parameters>
            <parameter name="singleUseFactorId"/>
            <parameter name="code"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount">
                <field-map field-name="username"/></entity-find-one>
            <set field="userId" from="userAccount.userId"/>
            <set field="emailAddress" from="userAccount.emailAddress"/>

            <!-- create a new single use authc factor code and get it's factorId -->
            <service-call name="org.moqui.impl.UserServices.create#SingleUseAuthcFactor"
                    in-map="[userId:userId, fromFactorId:'UserAccountEmail']" out-map="createSuFactorOut"/>
            <set field="singleUseFactorId" from="createSuFactorOut.factorId"/>

            <!-- send an email with the single use code -->
            <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" async="true">
                <field-map field-name="emailTemplateId" value="SINGLE_USE_CODE"/>
                <field-map field-name="toAddresses" from="emailAddress"/>
                <field-map field-name="bodyParameters" from="[code:createSuFactorOut.code,
                        thruDateString:ec.l10n.format(createSuFactorOut.thruDate, null)]"/>
            </service-call>
            <message>Authentication code sent to ${emailAddress}</message>
        </actions>
    </service>
    <service verb="send" noun="AuthcCodeSms">
        <description>
            For public access (outside an admin app) this should be called from send#AuthcCode which does validation,
            including verifying factor is owned by authc username in session.
            Service to send a SMS message with a single use code in it.
        </description>
        <in-parameters><parameter name="factorId" required="true"/></in-parameters>
        <out-parameters>
            <parameter name="singleUseFactorId"/>
            <parameter name="code"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="moqui.security.UserAuthcFactor" value-field="userAuthcFactor">
                <field-map field-name="factorId"/></entity-find-one>
            <set field="userId" from="userAuthcFactor.userId"/>
            <set field="contactNumber" from="userAuthcFactor.factorOption"/>

            <!-- create a new single use authc factor code and get it's factorId -->
            <service-call name="org.moqui.impl.UserServices.create#SingleUseAuthcFactor"
                    in-map="[userId:userId, fromFactorId:factorId]" out-map="createSuFactorOut"/>
            <set field="singleUseFactorId" from="createSuFactorOut.factorId"/>

            <!-- send a SMS message with the single use code -->
            <service-call name="org.moqui.SmsServices.send#SmsMessage">
                <field-map field-name="contactNumber"/>
                <!-- NOTE: uses LocalizedMessage with original=UserAuthcOtpMessage, defined in CommonL10nData.xml -->
                <field-map field-name="message" from="ec.resource.expand('UserAuthcOtpMessage', null, [code:createSuFactorOut.code])"/>
            </service-call>
            <message public="true" type="success">Authentication code sent to ${contactNumber}</message>

            <!-- TODO consider always sending email to account address to let them know a code was sent, need variation in email text for SMS
            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount">
                <field-map field-name="userId"/></entity-find-one>
            <if condition="userAccount.emailAddress">
                <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" async="true">
                    <field-map field-name="emailTemplateId" value="ADDED_EMAIL_AUTHC_FACTOR"/>
                    <field-map field-name="toAddresses" from="userAccount.emailAddress"/>
                    <field-map field-name="bodyParameters" from="[userEmail:emailAddress,
                            thruDateString:ec.l10n.format(createSuFactorOut.thruDate, null)]"/>
                </service-call>
            </if>
            -->
        </actions>
    </service>

    <service verb="create" noun="UserAuthcFactorEmail">
        <description>Creates a UserAuthcFactor entry for email</description>
        <in-parameters>
            <parameter name="userId" required="true"><description>User to enable Factor Method</description></parameter>
            <parameter name="fromDate" type="Timestamp" default="ec.user.nowTimestamp"/>
            <parameter name="thruDate" type="Timestamp"/>
            <parameter name="factorTypeEnumId" default-value="UafEmail"/>
            <parameter name="factorOption" required="true"><text-email/></parameter>
            <parameter name="needsValidation" default-value="Y"/>
        </in-parameters>
        <out-parameters>
            <parameter name="factorId"/>
            <!-- no longer generates and sends code: <parameter name="singleUseFactorId"/> <parameter name="code"/> -->
        </out-parameters>
        <actions>
            <entity-find-count entity-name="moqui.security.UserAuthcFactor" count-field="userAuthcFactorCount">
                <date-filter/>
                <econdition field-name="userId"/>
                <econdition field-name="factorOption"/>
            </entity-find-count>
            <if condition="userAuthcFactorCount == 0"><then>
                <!-- If there are no UserAuthcFactor entries for this user with the same email, create the UserAuthcFactor. -->
                <service-call name="create#moqui.security.UserAuthcFactor" in-map="context" out-map="context"/>
                <!-- don't send code email on create, do it manually if needed from UI:
                <service-call name="org.moqui.impl.UserServices.send#AuthcCodeEmail" in-map="[factorId:factorId]" out-map="context"/> -->
            </then><else>
                <!-- There is an UserAuthcFactor for this user that has the same email. Send error message to the user.-->
                <return error="true" message="Entry already exists for ${factorOption}"/>
            </else></if>
        </actions>
    </service>
    <service verb="create" noun="UserAuthcFactorSms">
        <description>Creates a UserAuthcFactor entry for SMS</description>
        <in-parameters>
            <parameter name="userId" required="true"><description>User to enable Factor Method</description></parameter>
            <parameter name="fromDate" type="Timestamp" default="ec.user.nowTimestamp"/>
            <parameter name="thruDate" type="Timestamp"/>
            <parameter name="factorTypeEnumId" default-value="UafSms"/>
            <parameter name="factorOption" required="true"><matches regexp="^\+?\d[-\. \d]*\d\d$" message="Please enter a valid phone number"/></parameter>
            <parameter name="needsValidation" default-value="Y"/>
        </in-parameters>
        <out-parameters>
            <parameter name="factorId"/>
        </out-parameters>
        <actions>
            <entity-find-count entity-name="moqui.security.UserAuthcFactor" count-field="userAuthcFactorCount">
                <date-filter/>
                <econdition field-name="userId"/>
                <econdition field-name="factorOption"/>
            </entity-find-count>
            <if condition="userAuthcFactorCount == 0"><then>
                <service-call name="create#moqui.security.UserAuthcFactor" in-map="context" out-map="context"/>
            </then><else>
                <return error="true" message="Entry already exists for ${factorOption}"/>
            </else></if>
        </actions>
    </service>

    <service verb="create" noun="UserAuthcFactorTotp">
        <description>Create an Authenticator App Factor.</description>
        <in-parameters>
            <parameter name="userId" required="true"/>
            <parameter name="thruDate" type="Timestamp" default="ec.user.nowTimestamp + 365"/>
            <parameter name="needsValidation" default-value="Y"/>
        </in-parameters>
        <out-parameters>
            <parameter name="factorId"/>
            <parameter name="factorOption"/>
        </out-parameters>
        <actions>
            <script>
                import dev.samstevens.totp.secret.DefaultSecretGenerator
                DefaultSecretGenerator gen = new DefaultSecretGenerator()
            </script>
            <set field="factorTypeEnumId" value="UafTotp"/>
            <set field="fromDate" from="ec.user.nowTimestamp"/>
            <set field="factorOption" from="gen.generate()"/>
            <service-call name="create#moqui.security.UserAuthcFactor" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="setup" noun="UserAuthcFactorTotp">
        <in-parameters>
            <parameter name="factorId"/>
            <parameter name="userId" required="true"/>
            <parameter name="thruDate"/>
        </in-parameters>
        <out-parameters>
            <parameter name="qrLabel"/>
            <parameter name="qrIssuer"/>
            <parameter name="qrSecret"/>
            <parameter name="qrUri"/>
            <parameter name="dataUri"/>
            <parameter name="needsValidation"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount">
                <field-map field-name="userId" from="userId"/></entity-find-one>

            <if condition="!factorId">
                <then>
                    <!-- If this service is called and no factorId is specified it will create a Totp UserAuthcFactor entry -->
                    <service-call name="org.moqui.impl.UserServices.create#UserAuthcFactorTotp"
                                  in-map="[userId:userId, thruDate:thruDate]" out-map="userFactor"/>
                </then><else>
                    <!-- If this service is called and a factorId is specified, get the userFactor from the database -->
                    <entity-find-one entity-name="moqui.security.UserAuthcFactor" value-field="userFactor">
                        <field-map field-name="factorId"/>
                        <field-map field-name="userId"/>
                    </entity-find-one>
                </else>
            </if>
            <set field="factorOption" from="userFactor.factorOption"/>

            <script>
                import dev.samstevens.totp.qr.*
                import dev.samstevens.totp.code.HashingAlgorithm
                import dev.samstevens.totp.util.Utils
                QrData data = new QrData.Builder().label(userAccount.username).secret(factorOption).issuer(ec.web.getHostName(false))
                    .algorithm(HashingAlgorithm.SHA1).digits(6).period(30).build()
                QrGenerator generator = new ZxingPngQrGenerator()
            </script>
            <set field="qrLabel" from="data.label"/><set field="qrIssuer" from="data.issuer"/><set field="qrSecret" from="data.secret"/>
            <set field="dataUri" from="Utils.getDataUriForImage(generator.generate(data), generator.getImageMimeType())"/>
            <set field="needsValidation" from="userFactor.needsValidation"/>
        </actions>
    </service>

    <service verb="invalidate" noun="UserAuthcFactorEntry">
        <description>Invalidate a factorId and any UserAuthcFactor entries that are dependant on that factorId.</description>
        <in-parameters>
            <parameter name="factorId" required="true"/>
            <parameter name="userId" required="true"/>
            <parameter name="fromFactorId"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="moqui.security.UserAuthcFactor" list="userAuthcFactorList">
                <date-filter/><econdition field-name="userId"/></entity-find>

            <iterate list="userAuthcFactorList" entry="userAuthcFactor">
                <if condition="userAuthcFactor.fromFactorId == factorId || userAuthcFactor.factorId == factorId">
                    <service-call name="update#moqui.security.UserAuthcFactor" in-map="[factorId:userAuthcFactor.factorId, thruDate:ec.user.nowTimestamp]"/>
                </if>
            </iterate>
        </actions>
    </service>
</services>
