<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.0.xsd">

    <service verb="set" noun="Preference" allow-remote="true">
        <in-parameters>
            <parameter name="preferenceKey" required="true"/>
            <parameter name="preferenceValue"/>
        </in-parameters>
        <actions><script>ec.user.setPreference(preferenceKey, preferenceValue)</script></actions>
    </service>
    
    <service verb="create" noun="UserAccount" authenticate="anonymous-all" allow-remote="false">
        <in-parameters>
            <parameter name="username" required="true"/>
            <parameter name="newPassword" required="true"/>
            <parameter name="newPasswordVerify" required="true"/>
            <parameter name="requirePasswordChange" default-value="N"/>
            <parameter name="userFullName"/>
            <parameter name="emailAddress"><text-email/></parameter>
            <parameter name="currencyUomId"/>
            <parameter name="locale"/>
            <parameter name="timeZone"/>
        </in-parameters>
        <out-parameters><parameter name="userId" required="true"/></out-parameters>
        <actions>
            <service-call name="create#moqui.security.UserAccount" out-map="context" in-map="context"/>
            <service-call name="org.moqui.impl.UserServices.update#PasswordInternal"
                in-map="[userId:userId, newPassword:newPassword, newPasswordVerify:newPasswordVerify,
                    requirePasswordChange:requirePasswordChange]"/>
            <if condition="ec.message.hasError()">
                <message error="true">Because of password errors not creating account with username ${username}</message></if>
        </actions>
    </service>

    <service verb="increment" noun="UserAccountFailedLogins" authenticate="anonymous-all" allow-remote="false">
        <in-parameters><parameter name="userId" required="true"/></in-parameters>
        <actions>
            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount"/>
            <set field="userAccount.successiveFailedLogins"
                 from="userAccount.successiveFailedLogins ? userAccount.successiveFailedLogins + 1 : 1"/>
            <set field="maxFailures" from="(ec.ecfi.confXmlRoot.first('user-facade').first('login').attribute('max-failures') ?: 3) as Integer"/>
            <!-- if successiveFailedLogins is greater than max in conf then disable account -->
            <if condition="userAccount.successiveFailedLogins > maxFailures &amp;&amp; userAccount.disabled != 'Y'">
                <set field="userAccount.disabled" value="Y"/>
                <set field="userAccount.disabledDateTime" from="ec.user.nowTimestamp"/>
            </if>
            <log level="warn" message="User ${userId} failed logins [${userAccount.successiveFailedLogins}], maxFailures [${maxFailures}], disabled [${userAccount.disabled}]"/>
            <entity-update value-field="userAccount"/>
        </actions>
    </service>

    <service verb="update" noun="Password" authenticate="anonymous-all" allow-remote="true">
        <description>Set a user's password. The userId must match the current user and the oldPassword must match the
            user's currentPassword or special permission is required.</description>
        <in-parameters>
            <parameter name="userId"><description>Defaults to the current userId in the ExecutionContext.</description></parameter>
            <parameter name="username"><description>May be used instead of userId to identify user.</description></parameter>
            <parameter name="oldPassword" required="true"><description>Ignored if user has password admin permissions.</description></parameter>
            <parameter name="newPassword" required="true"/>
            <parameter name="newPasswordVerify" required="true"/>
        </in-parameters>
        <actions>
            <set field="hasPwAdminPermission" from="ec.user.hasPermission('ADMIN_PASSWORD')"/>

            <if condition="userId"><then>
                <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount"/>
            </then><else-if condition="username">
                <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount">
                    <field-map field-name="username"/></entity-find-one>
            </else-if><else>
                <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount">
                    <field-map field-name="userId" from="ec.user.userId"/></entity-find-one>
            </else></if>
            <if condition="!userAccount"><return error="true" message="Could not find user with name ${username}"/></if>
            <set field="userId" from="userAccount.userId"/>

            <!-- compare the passwords, encrypted -->
            <if condition="!hasPwAdminPermission">
                <if condition="ec.user.userId &amp;&amp; userId != ec.user.userId">
                    <return message="Cannot update the password of another user without password admin permission" error="true"/></if>
                <if condition="!oldPassword">
                    <return message="Please enter current password" error="true"/></if>

                <script>
                    def token = new org.apache.shiro.authc.UsernamePasswordToken((String) userAccount.username, (String) oldPassword)
                    def info = new org.apache.shiro.authc.SimpleAuthenticationInfo(userAccount.username, userAccount.currentPassword,
                            userAccount.passwordSalt ? new org.apache.shiro.util.SimpleByteSource((String) userAccount.passwordSalt) : null,
                            "moquiRealm")
                </script>
                <if condition="!ec.ecfi.getCredentialsMatcher(userAccount.passwordHashType).doCredentialsMatch(token, info)">
                    <if condition="userAccount.resetPassword"><then>
                        <!-- try the resetPassword -->
                        <script>
                            info = new org.apache.shiro.authc.SimpleAuthenticationInfo(userAccount.username, userAccount.resetPassword,
                                    userAccount.passwordSalt ? new org.apache.shiro.util.SimpleByteSource((String) userAccount.passwordSalt) : null,
                                    "moquiRealm")
                        </script>
                        <if condition="!ec.ecfi.getCredentialsMatcher(userAccount.passwordHashType).doCredentialsMatch(token, info)">
                            <return message="Current password did not match password or reset password for user ${username}" error="true"/></if>
                    </then><else>
                        <return message="Current password incorrect for user ${username}" error="true"/>
                    </else></if>
                </if>
            </if>

            <service-call name="org.moqui.impl.UserServices.update#PasswordInternal"
                in-map="[userId:userId, newPassword:newPassword, newPasswordVerify:newPasswordVerify]"/>
        </actions>
    </service>
    <service verb="update" noun="PasswordInternal" authenticate="false" allow-remote="false">
        <in-parameters>
            <parameter name="userId" required="true"/>
            <parameter name="newPassword" required="true"/>
            <parameter name="newPasswordVerify" required="true"/>
            <parameter name="requirePasswordChange" default-value="N"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount"/>
            <if condition="userAccount == null">
                <return error="true" message="Cannot update password, Account not found with ID ${userId}"/></if>

            <!-- check a bunch of stuff about the new password -->
            <set field="passwordNode" from="ec.ecfi.confXmlRoot.first('user-facade').first('password')"/>

            <if condition="newPassword != newPasswordVerify">
                <message error="true">New Password and New Password Verify do not match</message></if>

            <set field="minLength" from="passwordNode.attribute('min-length')" default-value="6" type="Integer"/>
            <if condition="newPassword.length() &lt; minLength">
                <message error="true">Password shorter than ${minLength} characters</message></if>

            <set field="minDigits" from="passwordNode.attribute('min-digits')" default-value="1" type="Integer"/>
            <set field="digits" from="countChars(newPassword, true, false, false)"/>
            <if condition="digits &lt; minDigits">
                <message error="true">Password needs ${minDigits} digit/number characters</message></if>

            <set field="minOthers" from="passwordNode.attribute('min-others')" default-value="1" type="Integer"/>
            <set field="others" from="countChars(newPassword, false, false, true)"/>
            <if condition="others &lt; minOthers">
                <message error="true">Password needs ${minOthers} other characters (not letter or digit)</message></if>

            <!-- don't log this by default, security hole: <log level="info" message="newPassword=${newPassword}, length=${newPassword.length()}, digits=${digits}, others=${others}"/> -->

            <!-- if password is same as current don't allow it -->
            <set field="hashedNewPassword" from="ec.ecfi.getSimpleHash(newPassword, userAccount.passwordSalt, userAccount.passwordHashType)"/>
            <if condition="userAccount.currentPassword == hashedNewPassword">
                <message error="true">New password is same as current password</message></if>

            <!-- if password is in the history don't allow it -->
            <set field="historyLimit" from="passwordNode.attribute('history-limit')" default-value="5" type="Integer"/>
            <entity-find entity-name="moqui.security.UserPasswordHistory" list="duplicateUserPasswordHistoryList">
                <econdition field-name="userId" from="userId"/>
                <!-- can't query by this field since it is encrypted: <econdition field-name="password" from="newPassword"/> -->
            </entity-find>
            <iterate list="duplicateUserPasswordHistoryList" entry="duplicateUserPasswordHistory">
                <set field="hashedNewPassword" from="ec.ecfi.getSimpleHash(newPassword, duplicateUserPasswordHistory.passwordSalt, duplicateUserPasswordHistory.passwordHashType)"/>
                <if condition="duplicateUserPasswordHistory.password == hashedNewPassword">
                    <message error="true">Password was used in last ${historyLimit} passwords</message></if>
            </iterate>

            <check-errors/>
            <!-- from here on the newPassword is considered okay -->

            <!-- save history, then while more in history than password.@history-limit default 5 then remove oldest -->
            <service-call name="create#moqui.security.UserPasswordHistory"
                    in-map="[userId:userId, password:userAccount.currentPassword, passwordSalt:userAccount.passwordSalt,
                        passwordHashType:userAccount.passwordHashType, fromDate:ec.user.nowTimestamp]"/>
            <entity-find entity-name="moqui.security.UserPasswordHistory" list="existingUserPasswordHistoryList">
                <econdition field-name="userId" from="userId"/>
                <order-by field-name="fromDate"/>
            </entity-find>
            <while condition="existingUserPasswordHistoryList.size() &gt; historyLimit">
                <entity-delete value-field="existingUserPasswordHistoryList.remove(0)"/>
            </while>

            <!-- encrypt password (using password.@encrypt-hash-type default SHA) and save -->
            <set field="salt" from="ec.ecfi.randomSalt"/>
            <service-call name="update#moqui.security.UserAccount">
                <field-map field-name="userId"/>
                <field-map field-name="currentPassword" from="ec.ecfi.getSimpleHash(newPassword, salt)"/>
                <field-map field-name="passwordSalt" from="salt"/>
                <field-map field-name="passwordHashType" from="ec.ecfi.passwordHashType"/>
                <field-map field-name="passwordSetDate" from="ec.user.nowTimestamp"/>
                <field-map field-name="requirePasswordChange"/>
                <field-map field-name="resetPassword" from="null"/>
                <field-map field-name="disabled" value="N"/>
            </service-call>

            <message>Password updated for user ${userAccount.username}</message>
        </actions>
    </service>

    <service verb="enable" noun="UserAccount">
        <description>Enable a disabled account (set disabled=N, disabledDateTime=null, successiveFailedLogins=0)</description>
        <in-parameters><parameter name="userId" required="true"/></in-parameters>
        <actions>
            <service-call name="update#moqui.security.UserAccount"
                    in-map="[userId:userId, disabled:'N', disabledDateTime:null, successiveFailedLogins:0]"/>
        </actions>
    </service>
    <service verb="reset" noun="Password" authenticate="anonymous-all" allow-remote="true">
        <in-parameters>
            <parameter name="userId"/>
            <parameter name="username"><description>May be used instead of userId to identify user.</description></parameter>
        </in-parameters>
        <actions>
            <!-- find by userId -->
            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount" for-update="true"/>
            <if condition="!userAccount">
                <!-- find by username -->
                <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount" for-update="true">
                    <field-map field-name="username"/></entity-find-one>
            </if>
            <if condition="!userAccount">
                <return message="Could not find account with username ${username}" error="true"/></if>
            <if condition="!userAccount.emailAddress">
                <return message="Account with username ${username} does not have an email address" error="true"/></if>

            <!-- reset the password to a random value -->
            <set field="resetPassword" from="getRandomString(12)"/>
            <set field="passwordNode" from="ec.ecfi.confXmlRoot.first('user-facade').first('password')"/>
            <set field="userAccount.resetPassword" from="ec.ecfi.getSimpleHash(resetPassword, userAccount.passwordSalt, userAccount.passwordHashType)"/>
            <set field="userAccount.requirePasswordChange" from="(passwordNode.attribute('email-require-change') == 'false') ? 'N' : 'Y'"/>
            <entity-update value-field="userAccount"/>

            <!-- send an email with the new password -->
            <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" async="true">
                <field-map field-name="emailTemplateId" value="PASSWORD_RESET"/>
                <field-map field-name="toAddresses" from="userAccount.emailAddress"/>
                <field-map field-name="bodyParameters" from="[userAccount:userAccount, resetPassword:resetPassword]"/>
            </service-call>
            <message>A reset password was sent by email to ${userAccount.emailAddress}. This password may only be used to change your password. Your current password is still valid.</message>
            <if condition="userAccount.requirePasswordChange == 'Y'"><message>You must change your password before login.</message></if>
        </actions>
    </service>

    <service verb="create" noun="InitialAdminAccount" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="username" required="true"/>
            <parameter name="newPassword" required="true"/>
            <parameter name="newPasswordVerify" required="true"/>
            <parameter name="userFullName"/>
            <parameter name="emailAddress"><text-email/></parameter>
        </in-parameters>
        <out-parameters><parameter name="userId" required="true"/></out-parameters>
        <actions>
            <!-- only allow this if there are no user accounts, other than the _NA_ UserAccount which is in seed data -->
            <if condition="ec.entity.find('moqui.security.UserAccount').count() > 1">
                <return error="true" message="Can only create initial admin account if there are no UserAccount records"/></if>
            <service-call name="org.moqui.impl.UserServices.create#UserAccount" in-map="context" out-map="context"/>
            <service-call name="create#moqui.security.UserGroupMember" in-map="[userId:userId, userGroupId:'ADMIN']"/>
        </actions>
    </service>
</services>
