<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="set" noun="Preference" allow-remote="true">
        <in-parameters>
            <parameter name="preferenceKey" required="true"/>
            <parameter name="preferenceValue"/>
        </in-parameters>
        <actions><script>ec.user.setPreference(preferenceKey, preferenceValue)</script></actions>
    </service>
    
    <service verb="create" noun="UserAccount" authenticate="anonymous-all" allow-remote="false">
        <in-parameters>
            <auto-parameters entity-name="moqui.security.UserAccount" include="nonpk"><exclude field-name="currentPassword"/>
                <exclude field-name="resetPassword"/><exclude field-name="passwordSalt"/><exclude field-name="passwordHashType"/>
                <exclude field-name="passwordBase64"/><exclude field-name="passwordSetDate"/><exclude field-name="hasLoggedOut"/>
                <exclude field-name="disabledDateTime"/><exclude field-name="successiveFailedLogins"/>
            </auto-parameters>
            <parameter name="username" required="true"/>
            <parameter name="newPassword" required="true"/>
            <parameter name="newPasswordVerify" required="true"/>
            <parameter name="requirePasswordChange" default-value="N"/>
            <parameter name="disabled" default-value="N"/>
            <parameter name="emailAddress"><text-email/></parameter>
        </in-parameters>
        <out-parameters><parameter name="userId" required="true"/></out-parameters>
        <actions>
            <!-- see if username already in use (instead of catching on unique index) -->
            <entity-find entity-name="moqui.security.UserAccount" list="existingUaList">
                <econdition field-name="username" ignore-case="true"/></entity-find>
            <if condition="existingUaList"><return error="true" message="Username [${username}] is already in use. Please choose another."/></if>

            <if condition="emailAddress">
                <!-- see if emailAddress already in use (instead of catching on unique index) -->
                <entity-find entity-name="moqui.security.UserAccount" list="existingUaList">
                    <econdition field-name="emailAddress" ignore-case="true"/></entity-find>
                <if condition="existingUaList"><return error="true" message="Email ${emailAddress} is already in use. Login with username ${existingUaList[0].username}"/></if>
            </if>

            <service-call name="create#moqui.security.UserAccount" out-map="context" in-map="context"/>
            <service-call name="org.moqui.impl.UserServices.update#PasswordInternal" out-map="updateOut"
                in-map="[userId:userId, newPassword:newPassword, newPasswordVerify:newPasswordVerify,
                    requirePasswordChange:requirePasswordChange]"/>
            <if condition="updateOut.updateSuccessful &amp;&amp; !ec.message.hasError()"><then>
                <message public="true" type="success">Account created with username ${username}</message>
            </then><else-if condition="updateOut.passwordIssues">
                <message public="true" type="danger">Because of password issues not creating account with username ${username}</message>
                <return error="true" message="Removed temporary account with username ${username} for password issues"/>
            </else-if></if>
        </actions>
    </service>
    <service verb="update" noun="UserAccount">
        <in-parameters>
            <parameter name="userId" required="true"/>
            <auto-parameters entity-name="moqui.security.UserAccount" include="nonpk">
                <exclude field-name="currentPassword"/><exclude field-name="resetPassword"/><exclude field-name="passwordSalt"/>
                <exclude field-name="passwordHashType"/><exclude field-name="passwordBase64"/><exclude field-name="passwordSetDate"/>
                <exclude field-name="hasLoggedOut"/><exclude field-name="disabledDateTime"/><exclude field-name="successiveFailedLogins"/></auto-parameters>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount"/>
            <if condition="userAccount == null"><return error="true" message="User Account not found for User ID ${userId}"/></if>

            <if condition="username &amp;&amp; username != userAccount.username">
                <!-- see if username already in use -->
                <entity-find entity-name="moqui.security.UserAccount" list="existingUaList">
                    <econdition field-name="username" ignore-case="true"/></entity-find>
                <if condition="existingUaList"><return error="true" message="Username [${username}] is already in use. Please choose another."/></if>
            </if>
            <if condition="emailAddress &amp;&amp; emailAddress != userAccount.emailAddress">
                <!-- see if emailAddress already in use (instead of catching on unique index) -->
                <entity-find entity-name="moqui.security.UserAccount" list="existingUaList">
                    <econdition field-name="emailAddress" ignore-case="true"/></entity-find>
                <if condition="existingUaList"><return error="true" message="Email ${emailAddress} is already in use. Login with username ${existingUaList[0].username}"/></if>
            </if>

            <service-call name="update#moqui.security.UserAccount" in-map="context"/>
        </actions>
    </service>

    <service verb="increment" noun="UserAccountFailedLogins" authenticate="anonymous-all" allow-remote="false">
        <in-parameters><parameter name="userId" required="true"/></in-parameters>
        <actions>
            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount"/>
            <set field="userAccount.successiveFailedLogins"
                 from="userAccount.successiveFailedLogins ? userAccount.successiveFailedLogins + 1 : 1"/>
            <set field="maxFailures" from="(ec.ecfi.confXmlRoot.first('user-facade').first('login').attribute('max-failures') ?: 3) as Integer"/>
            <!-- if successiveFailedLogins is greater than max in conf then disable account -->
            <if condition="userAccount.successiveFailedLogins > maxFailures &amp;&amp; userAccount.disabled != 'Y'">
                <set field="userAccount.disabled" value="Y"/>
                <set field="userAccount.disabledDateTime" from="ec.user.nowTimestamp"/>
            </if>
            <log level="warn" message="User ${userId} failed logins [${userAccount.successiveFailedLogins}], maxFailures [${maxFailures}], disabled [${userAccount.disabled}]"/>
            <entity-update value-field="userAccount"/>
        </actions>
    </service>

    <service verb="update" noun="Password" authenticate="anonymous-all" allow-remote="true">
        <description>Set a user's password. The userId must match the current user and the oldPassword must match the
            user's currentPassword or special permission is required.</description>
        <in-parameters>
            <parameter name="userId"><description>Defaults to the current userId in the ExecutionContext.</description></parameter>
            <parameter name="username"><description>May be used instead of userId to identify user.</description></parameter>
            <parameter name="oldPassword" required="true"><description>Ignored if user has password admin permissions.</description></parameter>
            <parameter name="newPassword" required="true"/>
            <parameter name="newPasswordVerify" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="passwordIssues" type="Boolean"/>
            <parameter name="updateSuccessful" type="Boolean"/>
        </out-parameters>
        <actions>
            <set field="hasPwAdminPermission" from="ec.user.hasPermission('ADMIN_PASSWORD')"/>
            <set field="passwordIssues" from="false"/>
            <set field="updateSuccessful" from="false"/>

            <if condition="userId"><then>
                <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount"/>
            </then><else-if condition="username">
                <!-- NOTE: not using ignore-case here, for PW update required exact username match -->
                <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount">
                    <field-map field-name="username"/></entity-find-one>
            </else-if><else>
                <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount">
                    <field-map field-name="userId" from="ec.user.userId"/></entity-find-one>
            </else></if>
            <if condition="!userAccount"><return message="Could not find user with name ${username}" public="true" type="danger"/></if>
            <set field="userId" from="userAccount.userId"/>

            <!-- compare the passwords, encrypted -->
            <if condition="!hasPwAdminPermission">
                <if condition="ec.user.userId &amp;&amp; userId != ec.user.userId">
                    <return message="Cannot update the password of another user without password admin permission" public="true" type="danger"/></if>
                <if condition="!oldPassword">
                    <return message="Please enter current password" public="true" type="danger"/></if>

                <script>
                    def token = new org.apache.shiro.authc.UsernamePasswordToken((String) userAccount.username, (String) oldPassword)
                    def info = new org.apache.shiro.authc.SimpleAuthenticationInfo(userAccount.username, userAccount.currentPassword,
                            userAccount.passwordSalt ? new org.apache.shiro.util.SimpleByteSource((String) userAccount.passwordSalt) : null, "moquiRealm")
                </script>
                <if condition="!userAccount.currentPassword || !ec.ecfi.getCredentialsMatcher(userAccount.passwordHashType, 'Y'.equals(userAccount.passwordBase64)).doCredentialsMatch(token, info)">
                    <if condition="userAccount.resetPassword"><then>
                        <!-- try the resetPassword -->
                        <script>
                            info = new org.apache.shiro.authc.SimpleAuthenticationInfo(userAccount.username, userAccount.resetPassword,
                                    userAccount.passwordSalt ? new org.apache.shiro.util.SimpleByteSource((String) userAccount.passwordSalt) : null, "moquiRealm")
                        </script>
                        <if condition="!ec.ecfi.getCredentialsMatcher(userAccount.passwordHashType, 'Y'.equals(userAccount.passwordBase64)).doCredentialsMatch(token, info)">
                            <return message="Password did not match current password or reset password for user ${username}" public="true" type="danger"/></if>
                    </then><else>
                        <return message="Password incorrect for user ${username}" public="true" type="danger"/>
                    </else></if>
                </if>
            </if>

            <service-call name="org.moqui.impl.UserServices.update#PasswordInternal" out-map="context"
                    in-map="[userId:userId, newPassword:newPassword, newPasswordVerify:newPasswordVerify]"/>
            <if condition="updateSuccessful &amp;&amp; !ec.message.hasError()">
                <message public="true" type="success">Password updated for user ${userAccount.username}</message></if>
        </actions>
    </service>
    <service verb="update" noun="PasswordInternal" authenticate="false" allow-remote="false">
        <in-parameters>
            <parameter name="userId" required="true"/>
            <parameter name="newPassword" required="true"/>
            <parameter name="newPasswordVerify" required="true"/>
            <parameter name="requirePasswordChange" default-value="N"/>
        </in-parameters>
        <out-parameters>
            <parameter name="passwordIssues" type="Boolean"/>
            <parameter name="updateSuccessful" type="Boolean"/>
        </out-parameters>
        <actions>
            <set field="passwordIssues" from="false"/>
            <set field="updateSuccessful" from="false"/>
            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount"/>
            <if condition="userAccount == null">
                <return message="Cannot update password, Account not found with ID ${userId}" public="true" type="danger"/></if>

            <!-- check a bunch of stuff about the new password -->
            <set field="passwordNode" from="ec.ecfi.confXmlRoot.first('user-facade').first('password')"/>

            <if condition="newPassword != newPasswordVerify">
                <message public="true" type="danger">New Password and New Password Verify do not match</message>
                <set field="passwordIssues" from="true"/>
            </if>

            <set field="minLength" from="passwordNode.attribute('min-length')" default-value="8" type="Integer"/>
            <if condition="newPassword.length() &lt; minLength">
                <message public="true" type="warning">Password shorter than ${minLength} characters</message>
                <set field="passwordIssues" from="true"/>
            </if>

            <set field="minDigits" from="passwordNode.attribute('min-digits')" default-value="1" type="Integer"/>
            <set field="digits" from="countChars(newPassword, true, false, false)"/>
            <if condition="digits &lt; minDigits">
                <message public="true" type="warning">Password needs ${minDigits} digit/number characters</message>
                <set field="passwordIssues" from="true"/>
            </if>

            <set field="minOthers" from="passwordNode.attribute('min-others')" default-value="1" type="Integer"/>
            <set field="others" from="countChars(newPassword, false, false, true)"/>
            <if condition="others &lt; minOthers">
                <message public="true" type="warning">Password needs ${minOthers} other characters (not letter or digit)</message>
                <set field="passwordIssues" from="true"/>
            </if>

            <!-- don't log this by default, security hole: <log level="info" message="newPassword=${newPassword}, length=${newPassword.length()}, digits=${digits}, others=${others}"/> -->

            <!-- if password is same as current don't allow it -->
            <set field="hashedNewPassword" from="ec.ecfi.getSimpleHash(newPassword, userAccount.passwordSalt, userAccount.passwordHashType, 'Y'.equals(userAccount.passwordBase64))"/>
            <!-- <log level="warn" message="cur ${userAccount.currentPassword} : new ${hashedNewPassword}"/> -->
            <if condition="userAccount.currentPassword == hashedNewPassword">
                <message public="true" type="danger">New password is same as current password</message>
                <set field="passwordIssues" from="true"/>
            </if>

            <!-- if password is in the history don't allow it -->
            <set field="historyLimit" from="passwordNode.attribute('history-limit')" default-value="5" type="Integer"/>
            <entity-find entity-name="moqui.security.UserPasswordHistory" list="duplicateUserPasswordHistoryList">
                <econdition field-name="userId" from="userId"/>
                <!-- can't query by this field since it is encrypted: <econdition field-name="password" from="newPassword"/> -->
            </entity-find>
            <iterate list="duplicateUserPasswordHistoryList" entry="duplicateUserPasswordHistory">
                <set field="hashedNewPassword" from="ec.ecfi.getSimpleHash(newPassword, duplicateUserPasswordHistory.passwordSalt, duplicateUserPasswordHistory.passwordHashType, 'Y'.equals(userAccount.passwordBase64))"/>
                <if condition="duplicateUserPasswordHistory.password == hashedNewPassword">
                    <message public="true" type="warning">Password was used in last ${historyLimit} passwords</message>
                    <set field="passwordIssues" from="true"/>
                </if>
            </iterate>

            <if condition="passwordIssues"><return error="true" message="Found issues with password so not updating"/></if>
            <!-- from here on the newPassword is considered okay -->

            <!-- save history, then while more in history than password.@history-limit default 5 then remove oldest -->
            <service-call name="create#moqui.security.UserPasswordHistory"
                    in-map="[userId:userId, password:userAccount.currentPassword, passwordSalt:userAccount.passwordSalt,
                        passwordHashType:userAccount.passwordHashType, fromDate:ec.user.nowTimestamp]"/>
            <entity-find entity-name="moqui.security.UserPasswordHistory" list="existingUserPasswordHistoryList">
                <econdition field-name="userId" from="userId"/>
                <order-by field-name="fromDate"/>
            </entity-find>
            <while condition="existingUserPasswordHistoryList.size() &gt; historyLimit">
                <entity-delete value-field="existingUserPasswordHistoryList.remove(0)"/>
            </while>

            <!-- encrypt password (using password.@encrypt-hash-type default SHA-256) and save -->
            <set field="salt" from="ec.ecfi.randomSalt"/>
            <service-call name="update#moqui.security.UserAccount">
                <field-map field-name="userId"/>
                <field-map field-name="currentPassword" from="ec.ecfi.getSimpleHash(newPassword, salt)"/>
                <field-map field-name="passwordSalt" from="salt"/>
                <field-map field-name="passwordHashType" from="ec.ecfi.passwordHashType"/>
                <field-map field-name="passwordBase64" value="N"/>
                <field-map field-name="passwordSetDate" from="ec.user.nowTimestamp"/>
                <field-map field-name="requirePasswordChange"/>
                <field-map field-name="resetPassword" from="null"/>
                <field-map field-name="disabled" value="N"/>
            </service-call>
            <set field="updateSuccessful" from="true"/>
        </actions>
    </service>

    <service verb="enable" noun="UserAccount">
        <description>Enable a disabled account (set disabled=N, disabledDateTime=null, successiveFailedLogins=0)</description>
        <in-parameters><parameter name="userId" required="true"/></in-parameters>
        <actions>
            <service-call name="update#moqui.security.UserAccount"
                    in-map="[userId:userId, disabled:'N', disabledDateTime:null, successiveFailedLogins:0]"/>
        </actions>
    </service>
    <service verb="disable" noun="UserAccount">
        <description>Disable an account (set disabled=Y, disabledDateTime=now)</description>
        <in-parameters><parameter name="userId" required="true"/></in-parameters>
        <actions>
            <!-- set disabledDateTime to null so that account is permanently disabled (won't auto enable after wait period) -->
            <service-call name="update#moqui.security.UserAccount" in-map="[userId:userId, disabled:'Y', disabledDateTime:null]"/>
        </actions>
    </service>
    <service verb="reset" noun="Password" authenticate="anonymous-all" allow-remote="true">
        <in-parameters>
            <parameter name="userId"/>
            <parameter name="username"><description>May be used instead of userId to identify user.</description></parameter>
        </in-parameters>
        <actions>
            <!-- find by userId -->
            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount" for-update="true"/>
            <if condition="userAccount == null">
                <!-- find by username, no ignore-case here to require exact match for PW reset -->
                <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount" for-update="true">
                    <field-map field-name="username"/></entity-find-one>
            </if>
            <if condition="userAccount == null">
                <!-- find by emailAddress in case it was entered instead of username -->
                <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount" for-update="true">
                    <field-map field-name="emailAddress" from="username"/></entity-find-one>
            </if>
            <if condition="userAccount == null">
                <message public="true" type="danger">Could not find account with username or email address ${username}</message>
                <return error="true" message="Account not found"/>
            </if>
            <if condition="!userAccount.emailAddress">
                <message public="true" type="danger">Account with username ${username} does not have an email address</message>
                <return error="true" message="Account has no email address"/>
            </if>

            <!-- reset the password to a random value -->
            <set field="resetPassword" from="getRandomString(12)"/>
            <set field="passwordNode" from="ec.ecfi.confXmlRoot.first('user-facade').first('password')"/>
            <set field="userAccount.resetPassword" from="ec.ecfi.getSimpleHash(resetPassword, userAccount.passwordSalt, userAccount.passwordHashType, 'Y'.equals(userAccount.passwordBase64))"/>
            <set field="userAccount.requirePasswordChange" from="(passwordNode.attribute('email-require-change') == 'true') ? 'Y' : 'N'"/>
            <entity-update value-field="userAccount"/>

            <!-- send an email with the new password -->
            <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" async="true">
                <field-map field-name="emailTemplateId" value="PASSWORD_RESET"/>
                <field-map field-name="toAddresses" from="userAccount.emailAddress"/>
                <field-map field-name="bodyParameters" from="[userAccount:userAccount, resetPassword:resetPassword]"/>
            </service-call>
            <message public="true" type="success">A reset password was sent by email to ${userAccount.emailAddress}. This password may only be used to change your password. Your current password is still valid.</message>
            <if condition="userAccount.requirePasswordChange == 'Y'"><message public="true" type="info">You must change your password before login.</message></if>
        </actions>
    </service>

    <service verb="create" noun="InitialAdminAccount" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="username" required="true"/>
            <parameter name="newPassword" required="true"/>
            <parameter name="newPasswordVerify" required="true"/>
            <parameter name="userFullName"/>
            <parameter name="emailAddress"><text-email/></parameter>
        </in-parameters>
        <out-parameters><parameter name="userId" required="true"/></out-parameters>
        <actions>
            <!-- only allow this if there are no user accounts, other than the _NA_ UserAccount which is in seed data -->
            <if condition="ec.entity.find('moqui.security.UserAccount').count() > 1">
                <return error="true" message="Can only create initial admin account if there are no UserAccount records"/></if>
            <service-call name="org.moqui.impl.UserServices.create#UserAccount" in-map="context" out-map="context"/>
            <service-call name="create#moqui.security.UserGroupMember" in-map="[userId:userId, userGroupId:'ADMIN']"/>
        </actions>
    </service>


    <!-- ================================================= -->
    <!-- ====== User Authentication Factor Services ====== -->
    <!-- ================================================= -->


    <service verb="delete" noun="UserAuthcFactor" authenticate="anonymous-all">
        <description>After adding a new code, this will set the unused codes to not being able to be seen by the user.</description>
        <in-parameters>
            <parameter name="userId"/>
            <parameter name="factorTypeEnumId"/>
            <parameter name="fromFactorId"/>
            <parameter name="factorId"/>
        </in-parameters>
        <actions>
            <if condition="factorId!=null"><then>
<!--                <message type="info">null</message>-->
                <entity-find entity-name="moqui.security.UserAuthcFactor" list="uafList">
                    <econditions combine="or">
                        <econdition field-name="fromFactorId" value="${factorId}"/>
                        <econdition field-name="factorId" value="${factorId}"/></econditions>
                    <econditions combine="or">
                        <econdition field-name="thruDate" operator="is-null"/>
                        <econdition field-name="thruDate" operator="greater" from="ec.user.nowTimestamp"/></econditions></entity-find>
            </then><else-if condition="factorTypeEnumId == 'UafSingleUse'">
                <if condition="fromFactorId==null"><then>
<!--                    <message type="info">single use null</message>-->
                    <entity-find entity-name="moqui.security.UserAuthcFactor" list="uafList">
                        <econdition field-name="userId" value="${userId}"/>
                        <econdition field-name="factorTypeEnumId" value="${factorTypeEnumId}"/>
                        <econdition field-name="fromFactorId" operator="is-null"/>
                        <econditions combine="or">
                            <econdition field-name="thruDate" operator="is-null"/>
                            <econdition field-name="thruDate" operator="greater" from="ec.user.nowTimestamp"/></econditions>
                    </entity-find></then>
                    <else>
<!--                        <message type="info">single use not null</message>-->
                        <entity-find entity-name="moqui.security.UserAuthcFactor" list="uafList">
                            <econdition field-name="userId" value="${userId}"/>
                            <econdition field-name="factorTypeEnumId" value="UafSingleUse"/>
                            <econdition field-name="fromFactorId" value="${fromFactorId}"/>
                            <econdition field-name="thruDate" operator="greater" from="ec.user.nowTimestamp"/>
                        </entity-find>
                    </else>
                </if>
            </else-if></if>

            <iterate list="uafList" entry="uafCheck">
                <service-call name="update#moqui.security.UserAuthcFactor" in-map="[factorId:uafCheck.factorId, thruDate:ec.user.nowTimestamp]"/>
            </iterate>

        </actions>
    </service>

    <service verb="create" noun="UserAuthcFactorTotp" authenticate="anonymous-all">
        <description>Create an Authenticator App Factor.</description>
        <in-parameters>
            <parameter name="userId" required="true"><description>User to enable Single Use Factor Method</description></parameter>
            <parameter name="fromFactorId"/>
            <parameter name="factorTypeEnumId" default-value="UafTotp"/>
            <parameter name="fromDate" type="Timestamp" default="ec.user.nowTimestamp"/>
            <parameter name="thruDate" type="Timestamp" default="ec.user.nowTimestamp + 365"/>
        </in-parameters>
        <out-parameters>
            <parameter name="factorId"/>
        </out-parameters>
        <actions>
            <script>dev.samstevens.totp.secret.DefaultSecretGenerator gen = new dev.samstevens.totp.secret.DefaultSecretGenerator()
                factorOption = gen.generate()</script>
            <service-call name="create#moqui.security.UserAuthcFactor" in-map="context" out-map="context"/>
        </actions>
    </service>

    <service verb="create" noun="UserAuthcFactorSingleUse" authenticate="anonymous-all">
        <description>Create a single use authentication factor.</description>
        <in-parameters>
            <parameter name="userId" required="true"><description>User to enable Single Use Factor Method</description></parameter>
            <parameter name="fromFactorId" default="null"/>
            <parameter name="factorTypeEnumId" default-value="UafSingleUse"/>
            <parameter name="fromDate" type="Timestamp" default="ec.user.nowTimestamp"/>
            <parameter name="thruDate" type="Timestamp" default="ec.user.nowTimestamp + (365*5)"/>
            <parameter name="numberOfCodes" type="Integer" default="1"/>
        </in-parameters>
        <out-parameters>
            <parameter name="factorId"/>
            <parameter name="singleUseCodes" type="List"/>
        </out-parameters>
        <actions>
            <if condition="numberOfCodes &gt; 20"><return error="true" message="Cannot create more than 20 codes at a time"/></if>
            <service-call name="org.moqui.impl.UserServices.delete#UserAuthcFactor" in-map="[userId:userId,factorTypeEnumId:factorTypeEnumId,fromFactorId:fromFactorId]" />
            <set field="singleUseCodes" from="[]"/>

            <script>import dev.samstevens.totp.recovery.RecoveryCodeGenerator
                RecoveryCodeGenerator codes = new RecoveryCodeGenerator();
                singleUseCodes = codes.generateCodes(numberOfCodes)
                for(code in singleUseCodes){
                factorId = (null);
                factorOption = ec.ecfi.getSimpleHash(code, 'SaltySalt')
                def call_service_result = ec.service.sync().name("create#moqui.security.UserAuthcFactor").parameters(context).call()
                if (context != null) { if (call_service_result) context.putAll(call_service_result) } else { context = call_service_result }
                if (ec.message.hasError()) return
                }</script>

            <!--            <message type="success">Successfully created ${numberOfCodes} Single Use Code(s)!</message>-->
            <if condition="fromFactorId==null"><message type="info">Please write down the code(s) at the top of the screen now. They will not be recoverable after moving to another page.</message></if>
        </actions>
    </service>

    <service verb="create" noun="UserAuthcFactorEmail" authenticate="anonymous-all">
        <description>Create a single use email factor.</description>
        <in-parameters>
            <parameter name="userId" required="true"><description>User to enable Email Factor Method</description></parameter>
            <parameter name="fromFactorId"/>
            <parameter name="factorTypeEnumId" default-value="UafEmail"/>
            <parameter name="fromDate" type="Timestamp" default="ec.user.nowTimestamp"/>
            <parameter name="thruDate" type="Timestamp" default="ec.user.nowTimestamp + 1"/>
            <parameter name="factorOption" required="true" default=""><text-email/></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="factorId"/>
        </out-parameters>
        <actions>
            <!-- TODO: is there a better way to do this -->
            <entity-find-count entity-name="moqui.security.UserAuthcFactor" count-field="uafListCnt">
                <econdition field-name="userId" value="${userId}"/>
                <econdition field-name="factorTypeEnumId" value="UafEmail"/>
                <econdition field-name="factorOption" value="${factorOption}"/>
                <econdition field-name="thruDate" operator="greater" from="ec.user.nowTimestamp"/>
            </entity-find-count>
            <if condition="uafListCnt == 0">
                <service-call name="create#moqui.security.UserAuthcFactor" in-map="context" out-map="context"/>
                <set field="fromFactorId" from="factorId"/><set field="factorId" value=""/></if>
            <if condition="uafListCnt == 1">
                <entity-find-one entity-name="moqui.security.UserAuthcFactor" value-field="uafEmailField"><field-map field-name="factorOption" value="${factorOption}"/></entity-find-one>
                <set field="fromFactorId" from="uafEmailField.factorId"/></if>

            <service-call name="org.moqui.impl.UserServices.create#UserAuthcFactorSingleUse" in-map="[userId:userId,fromFactorId:fromFactorId,thruDate:thruDate,numberOfCodes:'1']" out-map="code"/>

            <set field="singleUseCode" from="code.singleUseCodes[0]"/>
            <message type="info">code is ${singleUseCode}</message>

            <!-- TODO: Send Email with singleUseCode -->

        </actions>
    </service>


</services>
