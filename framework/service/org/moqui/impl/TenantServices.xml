<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.0.xsd">

    <service verb="disable" noun="Tenant">
        <in-parameters><parameter name="tenantId"/></in-parameters>
        <actions>
            <entity-find-one entity-name="moqui.tenant.Tenant" value-field="tenant"/>
            <if condition="tenant.isEnabled != 'N'">
                <set field="tenant.isEnabled" value="N"/>
                <set field="tenant.disabledDate" from="ec.user.nowTimestamp"/>
                <entity-update value-field="tenant"/>
            </if>
        </actions>
    </service>
    <service verb="enable" noun="Tenant">
        <in-parameters><parameter name="tenantId"/></in-parameters>
        <actions>
            <entity-find-one entity-name="moqui.tenant.Tenant" value-field="tenant"/>
            <if condition="tenant.isEnabled == 'N'">
                <set field="tenant.isEnabled" value="Y"/>
                <set field="tenant.disabledDate" from="null"/>
                <entity-update value-field="tenant"/>
            </if>
        </actions>
    </service>

    <service verb="provision" noun="Tenant" type="interface">
        <description>Creates a new Tenant with admin user, database configuration (single database used for all entity
            groups), and optional host attachment.</description>
        <implements service="org.moqui.impl.UserServices.create#UserAccount"/>
        <!-- username, newPassword, newPasswordVerify, userFullName, emailAddress, currencyUomId, locale, timeZone -->
        <in-parameters>
            <parameter name="tenantId"><description>Sequenced ID used if none specified, must be simple name (letters, digits, underscore)</description></parameter>
            <parameter name="tenantName" required="true"/>
            <parameter name="isEnabled" default-value="Y"/>

            <parameter name="dataLoadTypes" default-value="seed,seed-initial,install">
                <description>If empty or 'all' defaults to all (just like the -load -types command line argument)</description></parameter>

            <parameter name="hostName"/>
            <parameter name="hostAllowOverride" default-value="N"/>
        </in-parameters>
        <out-parameters>
            <parameter name="tenantId" required="true"/>
            <parameter name="userId" required="true"/>
        </out-parameters>
    </service>

    <service verb="provision" noun="TenantDatabase">
        <description>Provision a tenant, calling service for database based on datasource.@database-conf-name in Moqui XML Conf file</description>
        <implements service="org.moqui.impl.TenantServices.provision#Tenant"/>
        <in-parameters>
            <parameter name="databaseConfName">
                <description>Defaults to datasource.@database-conf-name for the transactional datasource.</description></parameter>
            <parameter name="dbUser"><description>Defaults to xa-properties.@user</description></parameter>
            <parameter name="dbPassword"><description>Defaults to xa-properties.@password</description></parameter>
            <parameter name="waitForSetup" type="Boolean" default="true"/>
        </in-parameters>
        <actions>
            <if condition="ec.tenantId != 'DEFAULT'"><return error="true" message="Tenants can only be provisioned from the DEFAULT tenant"/></if>

            <if condition="!databaseConfName">
                <set field="datasourceNode" from="ec.entity.getDatasourceNode('transactional')"/>
                <set field="databaseConfName" from="datasourceNode.attribute('database-conf-name')"/>
            </if>
            <if condition="databaseConfName == 'h2'"><then>
                <service-call name="org.moqui.impl.TenantServices.provision#TenantH2" in-map="context" out-map="context"/>
            </then><else-if condition="databaseConfName == 'derby'">
                <service-call name="org.moqui.impl.TenantServices.provision#TenantDerby" in-map="context" out-map="context"/>
            </else-if><else-if condition="databaseConfName == 'mysql'">
                <service-call name="org.moqui.impl.TenantServices.provision#TenantMySQL" in-map="context" out-map="context"/>
            </else-if><else>
                <return error="true" message="Provision tenant for database ${databaseConfName} not supported"/>
            </else></if>
        </actions>
    </service>

    <service verb="setup" noun="Tenant">
        <implements service="org.moqui.impl.TenantServices.provision#Tenant"/>
        <in-parameters>
            <parameter name="tenantId" required="true"/>
        </in-parameters>
        <actions>
            <script><![CDATA[
                import org.moqui.context.ExecutionContext
                import org.moqui.entity.EntityDataLoader
                import org.moqui.impl.context.ArtifactExecutionInfoImpl

                ExecutionContext ec = context.ec

                // switch to new Tenant
                ec.changeTenant(tenantId)

                // auth anonymous user, turn off authz for data loading
                ec.getUser().loginAnonymousIfNoUser()
                ec.getArtifactExecution().disableAuthz()
                ArtifactExecutionInfoImpl aei = new ArtifactExecutionInfoImpl("loadData",
                        ArtifactExecutionInfoImpl.AT_OTHER, ArtifactExecutionInfoImpl.AUTHZA_ALL)
                ec.getArtifactExecution().push(aei, false)
                ec.getArtifactExecution().setAnonymousAuthorizedAll()

                try {
                    // load data
                    EntityDataLoader edl = ec.getEntity().makeDataLoader()
                    if (dataLoadTypes && dataLoadTypes != 'all') edl.dataTypes(new HashSet(Arrays.asList(dataLoadTypes.split(","))))

                    long startTime = System.currentTimeMillis()
                    records = edl.load()
                    totalSeconds = (System.currentTimeMillis() - startTime) / 1000

                    String loadMessage = ec.resource.expand('Loaded ${records} records in tenant ${tenantId} in ${totalSeconds} seconds for data types: ${dataLoadTypes}','')
                    ec.message.addMessage(loadMessage)
                    ec.logger.info(loadMessage)

                    // create admin user
                    context.putAll(ec.service.sync().name("org.moqui.impl.UserServices.create#UserAccount").parameters(context).call())
                    // add to admin UserGroup
                    ec.service.sync().name("create#moqui.security.UserGroupMember").parameters([userId:userId, userGroupId:'ADMIN']).call()
                    ec.logger.info("Created user ${username} in ADMIN group.")
                } finally {
                    // turn authz back on, etc
                    ec.getUser().logoutAnonymousOnly()
                    ec.getArtifactExecution().pop(aei)
                    ec.getArtifactExecution().enableAuthz()
                }

                ec.popTenant()

                ec.logger.info("Finished setup for tenant ${tenantId}")
            ]]></script>
        </actions>
    </service>
    <service verb="create" noun="TenantAdminAccount">
        <implements service="org.moqui.impl.UserServices.create#UserAccount"/>
        <in-parameters><parameter name="tenantId" required="true"/></in-parameters>
        <actions>
            <if condition="ec.tenantId != 'DEFAULT'"><return error="true" message="Tenants can only be managed from the DEFAULT tenant"/></if>

            <script>
                ec.changeTenant(tenantId)
                ec.getUser().loginAnonymousIfNoUser()
                ec.getArtifactExecution().disableAuthz()
                ec.getArtifactExecution().setAnonymousAuthorizedAll()
            </script>

            <service-call name="org.moqui.impl.UserServices.create#UserAccount" in-map="context" out-map="context"/>
            <service-call name="create#moqui.security.UserGroupMember" in-map="[userId:userId, userGroupId:'ADMIN']"/>

            <script>ec.popTenant()</script>
        </actions>
    </service>

    <service verb="provision" noun="TenantDerby">
        <implements service="org.moqui.impl.TenantServices.provision#Tenant"/>
        <in-parameters>
            <!-- use tenantId + template for JDBC URI, and admin account username/password for DB un/pw? -->
            <!--
            <parameter name="jndiName"/>
            <parameter name="jdbcUri"/>
            <parameter name="dbUsername"/>
            <parameter name="dbPassword"/>
            <parameter name="useXa" type="Boolean" default="false"/>
            -->
            <parameter name="waitForSetup" type="Boolean" default="false"/>
        </in-parameters>
        <actions>
            <service-call name="create#moqui.tenant.Tenant" in-map="context" out-map="context"/>

            <!-- Run this in a separate TX so the records are committed before we try to activate the tenant -->
            <script>ec.transaction.runRequireNew(null, "Error creating Tenant", {</script>
                <!-- create TenantDataSource and optionally TenantDataSourceXaProp records -->
                <service-call name="create#moqui.tenant.TenantDataSource"
                        in-map="[tenantId:tenantId, entityGroupName:'transactional', defaultToConfProps:'Y']"/>
                <service-call name="create#moqui.tenant.TenantDataSourceXaProp"
                        in-map="[tenantId:tenantId, entityGroupName:'transactional', propName:'databaseName',
                            propValue:('${moqui.runtime}/db/derby/' + tenantId)]"/>
                <service-call name="create#moqui.tenant.TenantDataSourceXaProp"
                        in-map="[tenantId:tenantId, entityGroupName:'transactional', propName:'createDatabase', propValue:'create']"/>

                <!-- add TenantHostDefault record if hostName specified -->
                <if condition="hostName"><service-call name="create#moqui.tenant.TenantHostDefault"
                        in-map="[hostName:hostName, tenantId:tenantId, allowOverride:hostAllowOverride]"/></if>

                <message>Created tenant ${tenantId} and added Derby database settings</message>
            <script>})</script>

            <!-- call setup#Tenant to load data, etc -->
            <script>
                def srw = ec.service.async().name("org.moqui.impl.TenantServices.setup#Tenant").parameters(context).callFuture()
                if (waitForSetup) srw.get()
            </script>
            <if condition="ec.message.hasError()">
                <message error="true">Found errors setting up tenant. Data may not have loaded data or admin user may not have been created (see other messages).</message></if>
        </actions>
    </service>
    <service verb="provision" noun="TenantH2">
        <implements service="org.moqui.impl.TenantServices.provision#Tenant"/>
        <in-parameters>
            <parameter name="dbUser"><description>Defaults to xa-properties.@user</description></parameter>
            <parameter name="dbPassword"><description>Defaults to xa-properties.@password</description></parameter>
            <parameter name="waitForSetup" type="Boolean" default="false"/>
        </in-parameters>
        <actions>
            <set field="datasourceNode" from="ec.entity.getDatasourceNode('transactional')"/>
            <set field="xaProperties" from="datasourceNode.first('inline-jdbc').first('xa-properties')"/>
            <if condition="!dbUser"><set field="dbUser" from="xaProperties ? xaProperties.attribute('user') : 'sa'"/></if>
            <if condition="!dbPassword"><set field="dbPassword" from="xaProperties ? xaProperties.attribute('password') : 'sa'"/></if>

            <!-- Run this in a separate TX so the records are committed before we try to activate the tenant -->
            <script>ec.transaction.runRequireNew(null, "Error creating Tenant", {</script>
                <service-call name="create#moqui.tenant.Tenant" in-map="context" out-map="context"/>

                <!-- create TenantDataSource and optionally TenantDataSourceXaProp records -->
                <service-call name="create#moqui.tenant.TenantDataSource"
                        in-map="[tenantId:tenantId, entityGroupName:'transactional', defaultToConfProps:'Y']"/>
                <set field="dbName" from="tenantId.charAt(0).isDigit() ? 'T' + tenantId : tenantId"/>
                <service-call name="create#moqui.tenant.TenantDataSourceXaProp"
                        in-map="[tenantId:tenantId, entityGroupName:'transactional', propName:'url',
                            propValue:('jdbc:h2:${moqui.runtime}/db/h2/' + dbName)]"/>
                <service-call name="create#moqui.tenant.TenantDataSourceXaProp"
                        in-map="[tenantId:tenantId, entityGroupName:'transactional', propName:'user', propValue:dbUser]"/>
                <service-call name="create#moqui.tenant.TenantDataSourceXaProp"
                        in-map="[tenantId:tenantId, entityGroupName:'transactional', propName:'password', propValue:dbPassword]"/>

                <!-- add TenantHostDefault record if hostName specified -->
                <if condition="hostName"><service-call name="create#moqui.tenant.TenantHostDefault"
                        in-map="[hostName:hostName, tenantId:tenantId, allowOverride:hostAllowOverride]"/></if>

                <message>Created tenant ${tenantId} and added H2 database settings</message>
            <script>})</script>

            <!-- call setup#Tenant to load data, etc -->
            <script>
                def srw = ec.service.async().name("org.moqui.impl.TenantServices.setup#Tenant").parameters(context).callFuture()
                if (waitForSetup) srw.get()
            </script>
            <if condition="ec.message.hasError()">
                <message error="true">Found errors setting up tenant. Data may not have loaded data or admin user may not have been created (see other messages).</message></if>
        </actions>
    </service>
    <service verb="provision" noun="TenantMySQL">
        <implements service="org.moqui.impl.TenantServices.provision#Tenant"/>
        <in-parameters>
            <parameter name="dbUser"><description>Defaults to xa-properties.@user</description></parameter>
            <parameter name="dbPassword"><description>Defaults to xa-properties.@password</description></parameter>
            <parameter name="waitForSetup" type="Boolean" default="false"/>
        </in-parameters>
        <actions>
            <set field="datasourceNode" from="ec.entity.getDatasourceNode('transactional')"/>
            <set field="xaProperties" from="datasourceNode.first('inline-jdbc').first('xa-properties')"/>
            <if condition="!dbUser"><set field="dbUser" from="xaProperties ? xaProperties.attribute('user') : 'moqui'"/></if>
            <if condition="!dbPassword"><set field="dbPassword" from="xaProperties ? xaProperties.attribute('password') : 'moqui'"/></if>

            <!-- Run this in a separate TX so the records are committed before we try to activate the tenant -->
            <script>ec.transaction.runRequireNew(null, "Error creating Tenant", {</script>
                <service-call name="create#moqui.tenant.Tenant" in-map="context" out-map="context"/>

                <!-- create TenantDataSource and optionally TenantDataSourceXaProp records -->
                <service-call name="create#moqui.tenant.TenantDataSource"
                        in-map="[tenantId:tenantId, entityGroupName:'transactional', defaultToConfProps:'Y']"/>

                <!-- NOTE: does not set other properties, default to those on the inline-jdbc.xa-properties element at runtime -->
                <set field="dbName" from="tenantId.charAt(0).isDigit() ? 'T' + tenantId : tenantId"/>
                <service-call name="create#moqui.tenant.TenantDataSourceXaProp"
                        in-map="[tenantId:tenantId, entityGroupName:'transactional', propName:'databaseName', propValue:dbName]"/>
                <service-call name="create#moqui.tenant.TenantDataSourceXaProp"
                        in-map="[tenantId:tenantId, entityGroupName:'transactional', propName:'user', propValue:dbUser]"/>
                <service-call name="create#moqui.tenant.TenantDataSourceXaProp"
                        in-map="[tenantId:tenantId, entityGroupName:'transactional', propName:'password', propValue:dbPassword]"/>

                <!-- add TenantHostDefault record if hostName specified -->
                <if condition="hostName"><service-call name="create#moqui.tenant.TenantHostDefault"
                        in-map="[hostName:hostName, tenantId:tenantId, allowOverride:hostAllowOverride]"/></if>

                <message>Created tenant ${tenantId} and added MySQL database settings</message>
            <script>})</script>

            <!-- create database; as with other code above assumes on same server as DEFAULT tenant, so connects to that and creates the database -->
            <script><![CDATA[
                import org.moqui.context.ExecutionContext
                ExecutionContext ec = context.ec

                String groupName = 'transactional'
                rowsAffected = 0
                rowsAffected += ec.entity.entityDbMeta.runSqlUpdate("CREATE DATABASE IF NOT EXISTS `${dbName}` DEFAULT CHARACTER SET utf8", groupName)
                // NOTE: not calling CREATE USER because IF NOT EXISTS returns an error instead of warning in MySQL 5.7.* (at least 5.7.10)
                // rowsAffected += ec.entity.entityDbMeta.runSqlUpdate("CREATE USER IF NOT EXISTS '${dbUser}' IDENTIFIED BY '${dbPassword}'", groupName)
                // NOTE: because of issue above user must already exist, often the case (using same user to access all tenant DBs; may create separate users to access only a single tenant DB)
                rowsAffected += ec.entity.entityDbMeta.runSqlUpdate("GRANT ALL ON ${dbName}.* TO '${dbUser}'", groupName)
            ]]></script>
            <log level="info" message="Created MySQL database ${dbName} with user ${dbUser}, rows affected: ${rowsAffected}"/>

            <!-- call setup#Tenant to load data, etc -->
            <script>
                def srw = ec.service.async().name("org.moqui.impl.TenantServices.setup#Tenant").parameters(context).callFuture()
                if (waitForSetup) srw.get()
            </script>
            <if condition="ec.message.hasError()">
                <message error="true">Found errors setting up tenant. Data may not have loaded data or admin user may not have been created (see other messages).</message></if>
        </actions>
    </service>
</services>
