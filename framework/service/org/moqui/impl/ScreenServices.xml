<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <!-- ========== ScheduledScreen Services ========== -->

    <service verb="render" noun="ScheduledScreens" authenticate="anonymous-all">
        <actions>
            <entity-find entity-name="moqui.screen.ScreenScheduled" list="screenScheduledList" cache="true">
                <date-filter/></entity-find>
            <iterate list="screenScheduledList" entry="screenScheduled">
                <if condition="!screenScheduled.cronExpression">
                    <log level="warn" message="ScreenScheduled ${screenScheduled.screenScheduledId} has no cronExpression, not running"/>
                    <continue/>
                </if>

                <!-- check cronExpression vs lastRunTime to see if we need to run -->
                <entity-find-one entity-name="moqui.screen.ScreenScheduledLock" value-field="screenScheduledLock">
                    <field-map field-name="screenScheduledId" from="screenScheduled.screenScheduledId"/></entity-find-one>
                <set field="shouldRun" from="org.moqui.impl.service.ScheduledJobRunner.isLastRunBeforeLastSchedule(
                        screenScheduled.cronExpression, screenScheduledLock?.lastRunTime, 'ScreenScheduled ' + screenScheduled.screenScheduledId, null)"/>

                <if condition="shouldRun">
                    <service-call name="org.moqui.impl.ScreenServices.render#ScheduledScreen"
                            in-map="[screenScheduledId:screenScheduled.screenScheduledId]" async="distribute"/>
                </if>
            </iterate>
        </actions>
    </service>
    <service verb="render" noun="ScheduledScreen" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="screenScheduledId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="moqui.screen.ScreenScheduled" value-field="screenScheduled" cache="true"/>
            <set field="screenPath" from="screenScheduled.screenPath"/>
            <set field="renderMode" from="screenScheduled.renderMode ?: 'csv'"/>
            <set field="formListFindId" from="screenScheduled.formListFindId"/>
            <set field="saveToLocation" from="screenScheduled.saveToLocation"/>

            <!-- NOTE: emailTemplate may be null, if so don't sent email -->
            <set field="emailTemplate" from="screenScheduled.emailTemplate"/>
            <set field="webappName" from="emailTemplate?.webappName ?: 'webroot'"/>
            <set field="webHostName" from="emailTemplate?.webHostName"/>
            <if condition="!webHostName"><set field="webHostName" from="ec.factory.getWebappInfo(webappName)?.httpsHost"/></if>

            <!-- return here if validations fail -->
            <if condition="!screenPath"><log level="error" message="ScreenScheduled ${screenScheduledId} has no screenPath, not running"/><return/></if>
            <if condition="emailTemplate == null &amp;&amp; !saveToLocation"><log level="error" message="ScreenScheduled ${screenScheduledId} has no emailTemplate or saveToLocation, not running"/><return/></if>

            <if condition="screenScheduled.userId">
                <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount">
                    <field-map field-name="userId" from="screenScheduled.userId"/></entity-find-one>
            </if>

            <!-- get the lock record with for-update to make sure we're the only one running, if no record create one to lock -->
            <entity-find-one entity-name="moqui.screen.ScreenScheduledLock" value-field="screenScheduledLock" for-update="true"/>
            <if condition="screenScheduledLock == null">
                <service-call name="create#moqui.screen.ScreenScheduledLock"
                        in-map="[screenScheduledId:screenScheduledId, lastRunTime:ec.user.nowTimestamp]"/>
            </if>

            <!-- check again to make sure should run, now that all is locked -->
            <set field="shouldRun" from="org.moqui.impl.service.ScheduledJobRunner.isLastRunBeforeLastSchedule(
                    screenScheduled.cronExpression, screenScheduledLock?.lastRunTime, 'ScreenScheduled ' + screenScheduled.screenScheduledId, null)"/>
            <if condition="!shouldRun"><return type="warning" message="ScreenScheduled ${screenScheduled.screenScheduledId} is not yet scheduled to run since last run time ${screenScheduledLock?.lastRunTime}"/></if>

            <!-- render screen -->
            <script><![CDATA[
                // TODO FUTURE: support renderMode == 'html' with inline content instead of attached

                Map attachmentInfo = null

                String extension = renderMode == "xsl-fo" ? "pdf" : renderMode
                String lastPath = screenPath.substring(screenPath.lastIndexOf("/")+1)
                String filename = lastPath + "-" + ec.l10n.format(ec.user.nowTimestamp, "yyyy-MM-dd-HH-mm") + "." + extension

                emailSubject = ec.resource.expand(screenScheduled.emailSubject, null)
                if (!emailSubject) emailSubject = "Scheduled Report ${lastPath} ${ec.l10n.format(ec.user.nowTimestamp, null)}"

                bodyParameters = [pageNoLimit:'true', emailSubject:emailSubject, title:emailSubject, screenPath:screenPath, webHostName:webHostName]
                ec.context.putAll(bodyParameters)

                // handle formListFindId parameters (formListFindId already in context to set columns, etc)
                if (formListFindId) {
                    def flfParameters = org.moqui.impl.screen.ScreenForm.makeFormListFindParameters(formListFindId, ec)
                    ec.context.putAll(flfParameters)
                    bodyParameters.putAll(flfParameters)
                }

                // login user before rendering screen, render as user
                if (userAccount != null) ec.user.internalLoginUser(userAccount.username, false)

                def screenRender = ec.screen.makeRender().webappName(webappName).rootScreenFromHost(webHostName ?: 'localhost')
                        .screenPath(screenPath).renderMode(renderMode)
                // TODO: consider config or something for protocol and port
                if (webHostName) screenRender.baseLinkUrl("https://${webHostName}")
                if (renderMode == "xsl-fo") {
                    // TODO: consider making this configurable on ScreenScheduled or something
                    layoutMaster = "letter-landscape"
                } else {
                    // xsl-fo needs the full render path for header/footer, others better just the last screen
                    screenRender.lastStandalone("true")
                }

                if (ec.screen.isRenderModeText(renderMode)) {
                    String screenText = screenRender.render()
                    if (screenText != null && screenText.trim().length() > 0) {
                        if (renderMode == "xsl-fo") {
                            // use ResourceFacade.xslFoTransform() to change to PDF
                            try {
                                ByteArrayOutputStream baos = new ByteArrayOutputStream()
                                ec.resource.xslFoTransform(new javax.xml.transform.stream.StreamSource(
                                        new java.io.StringReader(screenText)), null, baos, "application/pdf")

                                attachmentInfo = [fileName:filename, contentType:"application/pdf", contentBytes:baos.toByteArray()]
                            } catch (Exception e) {
                                ec.logger.warn("Error generating PDF from XSL-FO: ${e.toString()}")
                            }
                        } else {
                            String mimeType = ec.screen.getMimeTypeByMode(renderMode)
                            attachmentInfo = [fileName:filename, contentType:mimeType, contentText:screenText]
                        }
                    }
                } else {
                    ByteArrayOutputStream baos = new ByteArrayOutputStream()
                    screenRender.render(baos)

                    String mimeType = ec.screen.getMimeTypeByMode(renderMode)
                    attachmentInfo = [fileName:filename, contentType:mimeType, contentBytes:baos.toByteArray()]
                }
            ]]></script>

            <!-- if noResultsAbort == 'Y' don't write file or send email -->
            <if condition="screenScheduled.noResultsAbort != 'Y' || !ec.context.getSharedMap().get('_formListRendered') || ec.context.getSharedMap().get('_formListResultCount')"><then>
                <!-- send email -->
                <if condition="emailTemplate != null">
                    <set field="toAddressSet" from="new HashSet()"/>
                    <if condition="userAccount != null">
                        <if condition="userAccount?.emailAddress"><then>
                            <if condition="userAccount.disabled != 'Y'"><then>
                                <script>toAddressSet.add(userAccount.emailAddress)</script>
                            </then><else>
                                <log level="warn" message="User ${userAccount.username} [${userAccount.userId}] is disabled, not sending email for ScreenScheduled ${screenScheduledId}"/>
                            </else></if>
                        </then><else>
                            <log level="warn" message="User ${userAccount.username} [${userAccount.userId}] has no emailAddress, tried to use in ScreenScheduled ${screenScheduledId}"/>
                        </else></if>
                    </if>
                    <if condition="screenScheduled.userGroupId">
                        <entity-find entity-name="moqui.security.UserGroupMemberUser" list="groupUserList">
                            <date-filter/>
                            <econdition field-name="userGroupId" from="screenScheduled.userGroupId"/>
                            <select-field field-name="userId,username,emailAddress,disabled"/>
                        </entity-find>
                        <iterate list="groupUserList" entry="groupUser">
                            <if condition="groupUser.emailAddress"><then>
                                <if condition="groupUser.disabled != 'Y'"><then>
                                    <script>toAddressSet.add(groupUser.emailAddress)</script>
                                </then><else>
                                    <log level="warn" message="User ${groupUser.username} [${groupUser.userId}] in group ${screenScheduled.userGroupId} is disabled, not sending email for ScreenScheduled ${screenScheduledId}"/>
                                </else></if>
                            </then><else>
                                <log level="warn" message="User ${groupUser.username} [${groupUser.userId}] in group ${screenScheduled.userGroupId} has no emailAddress, tried to use in ScreenScheduled ${screenScheduledId}"/>
                            </else></if>
                        </iterate>
                    </if>
                    <if condition="toAddressSet"><then>
                        <set field="toAddresses" from="toAddressSet.join(',')"/>
                        <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" ignore-error="true" transaction="force-new"
                                in-map="[emailTemplateId:emailTemplate.emailTemplateId, bodyParameters:bodyParameters,
                                    attachments:[attachmentInfo], toAddresses:toAddresses, createEmailMessage:false]"/>
                    </then><else>
                        <log level="error" message="No email addresses found trying to send email for ScreenScheduled ${screenScheduledId} user ${screenScheduled.userId} group ${screenScheduled.userGroupId}"/>
                    </else></if>
                </if>

                <!-- saveToLocation -->
                <if condition="saveToLocation">
                    <script>
                        String saveToLocationExp = ec.resource.expand(saveToLocation, null)
                        try {
                            saveToRr = ec.resource.getLocationReference(saveToLocationExp)
                            if (attachmentInfo.contentText) {
                                saveToRr.putText(attachmentInfo.contentText)
                            } else if (attachmentInfo.contentBytes) {
                                saveToRr.putBytes(attachmentInfo.contentBytes)
                            }
                        } catch (Throwable t) {
                            ec.logger.log(200, "Error saving to saveToLocation ${saveToLocationExp} for ScreenScheduled ${screenScheduledId}", t)
                        }
                    </script>
                </if>
            </then><else>
                <log level="warn" message="Not saving or sending email for ScheduledScreen ${screenScheduledId}: noResultsAbort ${screenScheduled.noResultsAbort} _formListRendered ${ec.context.getSharedMap().get('_formListRendered')} _formListResultCount ${ec.context.getSharedMap().get('_formListResultCount')}"/>
            </else></if>

            <!-- save lastRunTime -->
            <service-call name="update#moqui.screen.ScreenScheduledLock"
                    in-map="[screenScheduledId:screenScheduledId, lastRunTime:ec.user.nowTimestamp]"/>
        </actions>
    </service>

    <!-- ========== DB Form Services ========== -->

    <service verb="get" noun="FormResponse">
        <in-parameters><parameter name="formResponseId" required="true"/></in-parameters>
        <out-parameters>
            <auto-parameters entity-name="moqui.screen.form.FormResponse"/>
            <parameter name="responseMap" type="Map"/>
            <parameter name="dbForm" type="Map"/>
            <parameter name="dbFormFieldList" type="List"/>
            <parameter name="dbFormFieldPages" type="Integer"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="moqui.screen.form.FormResponse" value-field="formResponse"/>
            <if condition="formResponse.formId">
                <entity-find-one entity-name="moqui.screen.form.DbForm" value-field="dbForm">
                    <field-map field-name="formId" from="formResponse.formId"/></entity-find-one>
                <entity-find entity-name="moqui.screen.form.DbFormField" list="dbFormFieldList">
                    <econdition field-name="formId" from="formResponse.formId"/>
                    <order-by field-name="layoutSequenceNum"/>
                </entity-find>
                <set field="dbFormFieldPages" from="1"/>
                <iterate list="dbFormFieldList" entry="dbFormField">
                    <set field="printPageNumber" from="dbFormField.printPageNumber ?: 1"/>
                    <if condition="printPageNumber &gt; dbFormFieldPages"><set field="dbFormFieldPages" from="printPageNumber"/></if>
                </iterate>
            </if>
            <script>context.putAll(formResponse)</script>
            <entity-find entity-name="moqui.screen.form.FormResponseAnswer" list="answerList">
                <econdition field-name="formResponseId"/></entity-find>
            <set field="responseMap" from="[:]"/>
            <iterate list="answerList" entry="answer">
                <script>responseMap.put(answer.fieldName, answer.valueText)</script>
            </iterate>
        </actions>
    </service>
    <service verb="create" noun="FormResponse">
        <in-parameters>
            <parameter name="formLocation" required="true" default-value="DbForm#${formId}"/>
            <parameter name="formId"/>
            <parameter name="userId" default="ec.user.userId"/>
            <parameter name="responseDate" type="Timestamp" default="ec.user.nowTimestamp"/>
            <parameter name="responseMap" type="Map"/>
        </in-parameters>
        <out-parameters><parameter name="formResponseId"/></out-parameters>
        <actions>
            <service-call name="create#moqui.screen.form.FormResponse" in-map="context" out-map="context"/>

            <if condition="responseMap">
                <set field="formNode" from="ec.screen.getFormNode(formLocation)"/>
                <iterate list="formNode.children('field')" entry="fieldNode">
                    <set field="fieldName" from="fieldNode.attribute('name')"/>
                    <if condition="responseMap.containsKey(fieldName)">
                        <service-call name="create#moqui.screen.form.FormResponseAnswer"
                                in-map="[formResponseId:formResponseId, formId:formId, fieldName:fieldName,
                                    valueText:org.moqui.util.ObjectUtilities.toPlainString(responseMap.get(fieldName))]"/>
                    </if>
                </iterate>
            </if>
        </actions>
    </service>
    <service verb="update" noun="FormResponse">
        <description>Updates existing FormResponseAnswer or adds new ones as needed. Note that this doesn't work with
            fields that have multiple responses (it will update the first response).</description>
        <in-parameters>
            <parameter name="formResponseId" required="true"/>
            <!-- QUESTION: update userId and responseDate? -->
            <parameter name="responseMap" type="Map" required="true"/>
        </in-parameters>
        <out-parameters><parameter name="formResponseId"/></out-parameters>
        <actions>
            <entity-find-one entity-name="moqui.screen.form.FormResponse" value-field="formResponse"/>
            <set field="formNode" from="ec.screen.getFormNode(formResponse.formLocation)"/>
            <iterate list="formNode.children('field')" entry="fieldNode">
                <set field="fieldName" from="fieldNode.attribute('name')"/>
                <if condition="responseMap.containsKey(fieldName)">
                    <entity-find-one entity-name="moqui.screen.form.FormResponseAnswer" value-field="answer">
                        <field-map field-name="formResponseId"/><field-map field-name="fieldName"/></entity-find-one>
                    <if condition="answer">
                        <service-call name="update#moqui.screen.form.FormResponseAnswer"
                                in-map="[formResponseAnswerId:answer.formResponseAnswerId,
                                    valueText:org.moqui.util.ObjectUtilities.toPlainString(responseMap.get(fieldName))]"/>
                        <else>
                            <service-call name="create#moqui.screen.form.FormResponseAnswer"
                                    in-map="[formResponseId:formResponseId, fieldName:fieldName,
                                        valueText:org.moqui.util.ObjectUtilities.toPlainString(responseMap.get(fieldName))]"/>
                        </else>
                    </if>
                </if>
            </iterate>
        </actions>
    </service>
    <service verb="delete" noun="FormResponse">
        <in-parameters><parameter name="formResponseId" required="true"/></in-parameters>
        <actions>
            <entity-find-one entity-name="moqui.screen.form.FormResponse" value-field="formResponse"/>
            <if condition="formResponse == null"><return message="Form Response ${formResponseId} not found"/></if>
            <entity-delete-by-condition entity-name="moqui.screen.form.FormResponseAnswer">
                <econdition field-name="formResponseId"/></entity-delete-by-condition>
            <entity-delete value-field="formResponse"/>
        </actions>
    </service>
    <service verb="update" noun="DbFormField">
        <in-parameters>
            <auto-parameters entity-name="moqui.screen.form.DbFormField" include="nonpk"/>
            <auto-parameters entity-name="moqui.screen.form.DbFormField" include="pk" required="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="moqui.screen.form.DbFormFieldOption" list="dbFormFieldOptionList">
                <econdition field-name="formId" from="formId"/>
                <econdition field-name="fieldName" from="fieldName"/>
            </entity-find>
            <entity-delete-by-condition entity-name="moqui.screen.form.DbFormFieldOption">
                <econdition field-name="formId" from="formId"/>
                <econdition field-name="fieldName" from="fieldName"/>
                <econdition field-name="sequenceNum" from="dbFormFieldOptionList.sequenceNum" operator="in"/>
            </entity-delete-by-condition>
            <service-call name="delete#moqui.screen.form.DbFormField" in-map="context"/>
            <set field="fieldName" from="org.moqui.util.StringUtilities.prettyToCamelCase(title, false)"/>
            <service-call name="create#moqui.screen.form.DbFormField" in-map="context"/>
            <iterate list="dbFormFieldOptionList" entry="dbFormFieldOption">
                <set field="dbFormFieldOption.formId" from="formId"/>
                <set field="dbFormFieldOption.fieldName" from="fieldName"/>
                <service-call name="create#moqui.screen.form.DbFormFieldOption" in-map="dbFormFieldOption"/>
            </iterate>
        </actions>
    </service>
    <service verb="delete" noun="DbFormField">
        <in-parameters>
            <auto-parameters entity-name="moqui.screen.form.DbFormField" include="nonpk"/>
            <auto-parameters entity-name="moqui.screen.form.DbFormField" include="pk" required="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="moqui.screen.form.DbFormFieldOption" list="dbFormFieldOptionList">
                <econdition field-name="formId" from="formId"/>
                <econdition field-name="fieldName" from="fieldName"/>
            </entity-find>
            <entity-delete-by-condition entity-name="moqui.screen.form.DbFormFieldOption">
                <econdition field-name="formId" from="formId"/>
                <econdition field-name="fieldName" from="fieldName"/>
                <econdition field-name="sequenceNum" from="dbFormFieldOptionList.sequenceNum" operator="in"/>
            </entity-delete-by-condition>
            <service-call name="delete#moqui.screen.form.DbFormField" in-map="context"/>
        </actions>
    </service>
    <service verb="get" noun="FormResponseStats">
        <in-parameters>
            <parameter name="formId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="textDbFormFieldResponseCountList" type="List"/>
            <parameter name="enumDbFormFieldResponseCountList" type="List"/>
            <parameter name="formResponseCount" type="List"/>
        </out-parameters>
        <actions>
            <script>enumFieldTypeEnumIdList = ['DBFFT_check', 'DBFFT_drop-down', 'DBFFT_radio'];</script>
            <entity-find entity-name="moqui.screen.form.DbFormField" list="textDbFormFieldList">
                <econdition field-name="formId" from="formId"/>
                <econdition field-name="fieldTypeEnumId" from="enumFieldTypeEnumIdList" operator="not-in" />
                <order-by field-name="layoutSequenceNum"/>
            </entity-find>
            <entity-find entity-name="moqui.screen.form.DbFormField" list="enumDbFormFieldList">
                <econdition field-name="formId" from="formId"/>
                <econdition field-name="fieldTypeEnumId" from="enumFieldTypeEnumIdList" operator="in"/>
                <order-by field-name="layoutSequenceNum"/>
            </entity-find>
            <set field="textDbFormFieldResponseCountList" from="[]"/>
            <iterate list="textDbFormFieldList" entry="textDbFormField">
                <set field="textDbFormFieldResponseObj" from="[:]"/>
                <entity-find-count entity-name="moqui.screen.form.FormResponseAnsAndDbFormField" count-field="textDbFormFieldResponseCount">
                    <econdition field-name="formId" from="formId"/>
                    <econdition field-name="fieldName" from="textDbFormField.fieldName"/>
                    <econditions combine="and">
                        <econdition field-name="valueText" value="" operator="not-equals"/>
                        <econdition field-name="valueText" operator="is-not-null"/>
                    </econditions>
                </entity-find-count>
                <script>textDbFormFieldResponseObj.put("title", textDbFormField.title)
                    textDbFormFieldResponseObj.put("count", textDbFormFieldResponseCount)
                    textDbFormFieldResponseCountList.add(textDbFormFieldResponseObj)</script>
            </iterate>
            <set field="enumDbFormFieldResponseCountList" from="[]"/>
            <iterate list="enumDbFormFieldList" entry="enumDbFormField">
                <set field="enumDbFormFieldOptionResponseObj" from="[:]"/>
                <set field="enumDbFormFieldOptionResponseList" from="[]"/>
                <entity-find entity-name="moqui.screen.form.DbFormFieldOption" list="dbFormFieldOptionList">
                    <econdition field-name="formId" from="formId"/>
                    <econdition field-name="fieldName" from="enumDbFormField.fieldName"/>
                </entity-find>
                <iterate list="dbFormFieldOptionList" entry="dbFormFieldOption">
                    <set field="dbFormFieldOptionResponseObj" from="[:]"/>
                    <entity-find-count entity-name="moqui.screen.form.FormResponseAnsAndDbFormField" count-field="enumDbFormFieldOptionResponseCount">
                        <econdition field-name="formId" from="formId"/>
                        <econdition field-name="fieldName" from="enumDbFormField.fieldName"/>
                        <econdition field-name="valueText" from="dbFormFieldOption.keyValue" operator="equals"/>
                    </entity-find-count>
                    <script>dbFormFieldOptionResponseObj.put("text", dbFormFieldOption.text)
                        dbFormFieldOptionResponseObj.put("count", enumDbFormFieldOptionResponseCount)
                        enumDbFormFieldOptionResponseList.add(dbFormFieldOptionResponseObj)</script>
                </iterate>
                <script>enumDbFormFieldOptionResponseObj.put("title", enumDbFormField.title)
                    enumDbFormFieldOptionResponseObj.put("fieldOptionList", enumDbFormFieldOptionResponseList)
                    enumDbFormFieldResponseCountList.add(enumDbFormFieldOptionResponseObj)</script>
            </iterate>
            <entity-find-count entity-name="moqui.screen.form.FormResponse" count-field="formResponseCount">
                <econdition field-name="formId" from="formId"/>
            </entity-find-count>
        </actions>
    </service>
</services>
