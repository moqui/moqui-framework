<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<entity-facade-xml type="seed-initial">
    <!-- EmailTemplate for password reset email -->
    <moqui.basic.email.EmailTemplate emailTemplateId="PASSWORD_RESET" description="Default Password Reset" emailServerId="SYSTEM"
            emailTypeEnumId="EMT_PWD_RESET" bodyScreenLocation="classpath://screen/PasswordReset.xml" webappName="webroot"
            fromAddress="" ccAddresses="" bccAddresses="" subject="Password Reset" sendPartial="Y"/>
    <!-- EmailTemplate for general notifications -->
    <moqui.basic.email.EmailTemplate emailTemplateId="NOTIFICATION" description="Default Notification" emailServerId="SYSTEM"
            emailTypeEnumId="EMT_NOTIFICATION" bodyScreenLocation="classpath://screen/NotificationEmail.xml" webappName="webroot"
            fromAddress="" fromName="" ccAddresses="" bccAddresses="" subject="${title}" sendPartial="Y"/>
    <!-- EmailTemplate for rendered screens (reports, etc) -->
    <moqui.basic.email.EmailTemplate emailTemplateId="SCREEN_RENDER" description="Default Screen Render" emailServerId="SYSTEM"
            emailTypeEnumId="EMT_SCREEN_RENDER" bodyScreenLocation="classpath://screen/ScreenRenderEmail.xml" webappName="webroot"
            fromAddress="" fromName="" ccAddresses="" bccAddresses="" subject="${title}" sendPartial="Y"/>

    <!-- Web Servlet Errors NotificationTopic -->
    <moqui.security.user.NotificationTopic topic="WebServletError" description="Web Servlet Error"
            typeString="danger" showAlert="Y" persistOnSend="Y" receiveNotifications="N" isPrivate="Y" emailTemplateId="NOTIFICATION"
            titleTemplate="Web Error ${errorCode?:''} (${username?:'no user'}) ${path?:''} ${message?:'N/A'}"/>
    <moqui.security.user.NotificationTopic topic="ServiceJobError" description="Service Job Error"
            typeString="danger" showAlert="Y" persistOnSend="Y" receiveNotifications="N" isPrivate="Y" emailTemplateId="NOTIFICATION"
            titleTemplate="Job Error ${serviceCallRun.jobName?:''} [${serviceCallRun.jobRunId?:''}] ${serviceCallRun.errors?:'N/A'}"
            linkTemplate="/vapps/system/ServiceJob/JobRuns/JobRunDetail?jobRunId=${serviceCallRun.jobRunId}"/>

    <!-- ========== Framework Scheduled ServiceJob Data ========== -->
    <!-- Handy cron strings: [0 0 2 * * ?] every night at 2:00 am, [0 0/15 * * * ?] every 15 minutes, [0 0/2 * * * ?] every 2 minutes -->

    <moqui.service.job.ServiceJob jobName="clean_ArtifactData_daily" description="Clean Artifact Data: ArtifactHit, ArtifactHitBin"
            serviceName="org.moqui.impl.ServerServices.clean#ArtifactData" cronExpression="0 0 2 * * ?" paused="N">
        <parameters parameterName="daysToKeep" parameterValue="90"/>
    </moqui.service.job.ServiceJob>
    <moqui.service.job.ServiceJob jobName="clean_PrintJobData_daily" description="Clean PrintJob Data"
            serviceName="org.moqui.impl.ServerServices.clean#PrintJobData" cronExpression="0 0 2 * * ?" paused="N">
        <parameters parameterName="daysToKeep" parameterValue="7"/>
    </moqui.service.job.ServiceJob>
    <moqui.service.job.ServiceJob jobName="clean_ServiceJobRun_daily" description="Clean ServiceJobRun Data"
            serviceName="org.moqui.impl.ServiceServices.clean#ServiceJobRun" cronExpression="0 0 2 * * ?" paused="N">
        <parameters parameterName="daysToKeep" parameterValue="30"/>
    </moqui.service.job.ServiceJob>

    <!-- Change paused to 'N' to run the EntitySync job -->
    <moqui.service.job.ServiceJob jobName="run_EntitySyncAll_frequent" description="Run All EntitySync"
            serviceName="org.moqui.impl.EntitySyncServices.run#EntitySyncAll" cronExpression="0 0/15 * * * ?" paused="Y"/>

    <!-- Change paused to 'N' to run SystemMessage send produced and consume received jobs -->
    <moqui.service.job.ServiceJob jobName="send_AllProducedSystemMessages_frequent" description="Send All Produced SystemMessages"
            serviceName="org.moqui.impl.SystemMessageServices.send#AllProducedSystemMessages" cronExpression="0 0/15 * * * ?" paused="Y"/>
    <moqui.service.job.ServiceJob jobName="consume_AllReceivedSystemMessages_frequent" description="Consume All Received SystemMessages"
            serviceName="org.moqui.impl.SystemMessageServices.consume#AllReceivedSystemMessages" cronExpression="0 0/15 * * * ?" paused="Y"/>

    <!-- Change paused to 'N' to run the poll EmailServer job; NOTE emailServerId=SYSTEM, change if needed along with run frequency -->
    <moqui.service.job.ServiceJob jobName="poll_EmailServer_frequent" description="Poll EmailServer to get new messages"
            serviceName="org.moqui.impl.EmailServices.poll#EmailServer" cronExpression="0 0/15 * * * ?" paused="Y">
        <parameters parameterName="emailServerId" parameterValue="SYSTEM"/>
    </moqui.service.job.ServiceJob>

    <!-- Render ScheduledScreens -->
    <moqui.service.job.ServiceJob jobName="render_ScheduledScreens_frequent" description="Render Scheduled Screens"
            serviceName="org.moqui.impl.ScreenServices.render#ScheduledScreens" cronExpression="0 0/15 * * * ?" paused="N"/>

    <!-- Service Job: Index DataFeed Documents -->
    <moqui.security.user.NotificationTopic topic="IndexDataFeedDocuments" description="Index DataFeed Documents Completed"
            typeString="success" showAlert="Y" persistOnSend="Y" receiveNotifications="Y"
            titleTemplate="Index Documents Completed for DataFeed ${parameters.dataFeedId}, indexed ${results.documentsIndexed} documents"
            errorTitleTemplate="Error in Index Documents for DataFeed ${parameters.dataFeedId}"
            linkTemplate=""/>
    <moqui.service.job.ServiceJob jobName="IndexDataFeedDocuments" description="Index DataFeed Documents"
            serviceName="org.moqui.search.SearchServices.index#DataFeedDocuments" topic="IndexDataFeedDocuments"
            transactionTimeout="3600"/>

    <!-- Service Job: Export and Import Entity Data Snapshot -->
    <moqui.security.user.NotificationTopic topic="ExportEntityDataSnapshot" description="Export Entity Data Snapshot Completed"
            typeString="success" showAlert="Y" persistOnSend="Y" receiveNotifications="Y" isPrivate="Y" emailTemplateId="NOTIFICATION"
            titleTemplate="Exported ${results.recordsWritten} records to Entity Data Snapshot ${parameters.baseFilename}"
            errorTitleTemplate="Error in export of entity data snapshot ${parameters.baseFilename}"
            linkTemplate=""/>
    <moqui.service.job.ServiceJob jobName="ExportEntityDataSnapshot" description="Export Entity Data Snapshot"
            serviceName="org.moqui.impl.EntityServices.export#EntityDataSnapshot" topic="ExportEntityDataSnapshot"
            transactionTimeout="3600"/>
    <moqui.security.user.NotificationTopic topic="ImportEntityDataSnapshot" description="Import Entity Data Snapshot Completed"
            typeString="success" showAlert="Y" persistOnSend="Y" receiveNotifications="Y" isPrivate="Y" emailTemplateId="NOTIFICATION"
            titleTemplate="Imported ${results.recordsLoaded} records from Entity Data Snapshot ${parameters.zipFilename}"
            errorTitleTemplate="Error in import of entity data snapshot ${parameters.zipFilename}"
            linkTemplate=""/>
    <moqui.service.job.ServiceJob jobName="ImportEntityDataSnapshot" description="Import Entity Data Snapshot"
            serviceName="org.moqui.impl.EntityServices.import#EntityDataSnapshot" topic="ImportEntityDataSnapshot"
            transactionTimeout="3600"/>

    <!-- ========== ElasticSearch Setup Data ========== -->

    <moqui.security.UserPermission userPermissionId="ElasticRemote" description="ElasticSearch Remote Access"/>
    <moqui.security.UserGroupPermission userGroupId="ADMIN" userPermissionId="ElasticRemote" fromDate="0"/>

    <moqui.security.UserPermission userPermissionId="KibanaRemote" description="Kibana Remote Access"/>
    <moqui.security.UserGroupPermission userGroupId="ADMIN" userPermissionId="KibanaRemote" fromDate="0"/>

    <!-- Handy cron strings: [0 0 2 * * ?] every night at 2:00 am, [0 0/15 * * * ?] every 15 minutes, [0 0/2 * * * ?] every 2 minutes -->
    <moqui.service.job.ServiceJob jobName="clean_ElasticSearchLogMessages_daily" description="Clean log messages stored in ElasticSearch"
            serviceName="org.moqui.search.SearchServices.delete#Documents" cronExpression="0 0 2 * * ?" paused="Y">
        <parameters parameterName="indexName" parameterValue="moqui_logs"/>
        <parameters parameterName="timestampField" parameterValue="@timestamp"/>
        <parameters parameterName="daysToKeep" parameterValue="90"/>
    </moqui.service.job.ServiceJob>
    <moqui.service.job.ServiceJob jobName="clean_ElasticSearchHttpLogMessages_daily" description="Clean http request log messages stored in ElasticSearch"
            serviceName="org.moqui.search.SearchServices.delete#Documents" cronExpression="0 0 2 * * ?" paused="Y">
        <parameters parameterName="indexName" parameterValue="moqui_http_log"/>
        <parameters parameterName="timestampField" parameterValue="@timestamp"/>
        <parameters parameterName="daysToKeep" parameterValue="180"/>
    </moqui.service.job.ServiceJob>
</entity-facade-xml>
