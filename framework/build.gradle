/*
 * This software is in the public domain under CC0 1.0 Universal plus a
 * Grant of Patent License.
 *
 * To the extent possible under law, the author(s) have dedicated all
 * copyright and related and neighboring rights to this software to the
 * public domain worldwide. This software is distributed without any
 * warranty.
 *
 * You should have received a copy of the CC0 Public Domain Dedication
 * along with this software (see the LICENSE.md file). If not, see
 * <http://creativecommons.org/publicdomain/zero/1.0/>.
 */

// tasks.withType(JavaCompile) { options.compilerArgs << "-Xlint:unchecked" }
// tasks.withType(GroovyCompile) { options.compilerArgs << "-Xlint:unchecked" }
// tasks.withType(GroovyCompile) { options.compilerArgs << "-Xlint:deprecation" }

version = '2.0.0'

apply plugin: 'groovy'
apply plugin: 'war'
// to run gradle-versions-plugin use "gradle dependencyUpdates"
apply plugin: 'com.github.ben-manes.versions'
// uncomment to add the Error Prone compiler; not enabled by default (doesn't work on Travis CI)
// apply plugin: 'net.ltgt.errorprone'
buildscript {
    repositories {
        jcenter()
        // uncomment to add the Error Prone compiler: maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
        // uncomment to add the Error Prone compiler: classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.8'
    }
}
dependencyUpdates.resolutionStrategy = { componentSelection { rules -> rules.all { ComponentSelection selection ->
    boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier -> selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/ }
    if (rejected) selection.reject('Release candidate')
} } }

// NOTE: packages should match group, name, version found at https://bintray.com/bintray/jcenter
repositories {
    flatDir name: 'localLib', dirs: projectDir.absolutePath + '/lib'
    jcenter() // http://jcenter.bintray.com
}

sourceCompatibility = '1.7'
targetCompatibility = '1.7'
archivesBaseName = 'moqui'

sourceSets {
    start
    execWar
}

groovydoc {
    docTitle = "Moqui Framework ${version}"
    source = sourceSets.main.allSource
}

dependencies {
    // Groovy
    compile 'org.codehaus.groovy:groovy-all:2.4.7' // Apache 2.0
    // jansi is needed for groovydoc only, so in providedCompile (not included in war)
    providedCompile 'org.fusesource.jansi:jansi:1.13'

    // ========== Local (flatDir) libraries in framework/lib ==========

    // Bitronix Transaction Manager (the default internal tx mgr; custom build from source as 3.0.0 not yet released)
    compile 'org.codehaus.btm:btm:3.0.0-SNAPSHOT' // Apache 2.0
    // Bitronix depends on javassist (as does OrientDB, etc; note included here for easier reference, not in framework/lib)
    compile 'org.javassist:javassist:3.20.0-GA' // Apache 2.0

    compile name: 'cups4j', version: '0.6.4' // LGPL <== NOTE!

    // ========== Libraries from jcenter ==========

    // Apache Commons
    compile 'org.apache.commons:commons-csv:1.4' // Apache 2.0
    compile 'org.apache.commons:commons-email:1.4' // Apache 2.0
    compile 'org.apache.commons:commons-lang3:3.4' // Apache 2.0; used by cron-utils, may use internally
    compile 'commons-beanutils:commons-beanutils:1.9.2' // Apache 2.0
    compile 'commons-codec:commons-codec:1.10' // Apache 2.0
    compile 'commons-collections:commons-collections:3.2.2' // Apache 2.0
    // not currently needed/used: compile module('commons-configuration:commons-configuration:1.10') // Apache 2.0
    compile 'commons-digester:commons-digester:2.1' // Apache 2.0
    compile 'commons-fileupload:commons-fileupload:1.3.2' // Apache 2.0
    compile 'commons-io:commons-io:2.5' // Apache 2.0
    compile 'commons-logging:commons-logging:1.2' // Apache 2.0
    compile 'commons-validator:commons-validator:1.5.1' // Apache 2.0

    // cron-utils
    compile 'com.cronutils:cron-utils:4.1.1' // Apache 2.0

    // Freemarker
    compile 'org.freemarker:freemarker:2.3.25-incubating' // Apache 2.0
    providedCompile module('com.google.code.findbugs:annotations:3.0.1') // need only during compile when using freemarker

    // Guava (big but used cron-utils, ElasticSearch, by OWASP Java HTML Sanitizer, may use internally in framework too)
    compile 'com.google.guava:guava:19.0' // Apache 2.0

    // Java Specifications
    compile 'javax.transaction:jta:1.1'
    compile 'javax.cache:cache-api:1.0.0'
    compile 'javax.jcr:jcr:2.0'
    compile 'javax.websocket:javax.websocket-api:1.0' // using 1.0, don't update to 1.1 until used in Jetty, Tomcat, etc
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    // Specs not needed by default:
    // compile 'javax.resource:connector-api:1.5'
    // compile 'javax.jms:jms:1.1'

    // H2 Database
    compile 'com.h2database:h2:1.4.192' // MPL 2.0, EPL 1.0

    // Apache HTTP Components
    compile 'org.apache.httpcomponents:httpclient:4.5.2' // Apache 2.0
    compile 'org.apache.httpcomponents:httpcore:4.4.5' // Apache 2.0

    // javax.mail
    compile 'com.sun.mail:javax.mail:1.5.5' // CDDL

    // Joda
    compile 'joda-time:joda-time:2.9.4' // Apache 2.0
    compile 'org.joda:joda-convert:1.8.1' // Apache 2.0

    // OWASP Java HTML Sanitizer
    compile 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20160526.1' // New BSD & Apache 2.0

    // Pegdown (Markdown renderer)
    compile 'org.pegdown:pegdown:1.6.0' // Apache 2.0
    compile 'org.parboiled:parboiled-java:1.1.7' // Apache 2.0

    // Apache Shiro
    compile 'org.apache.shiro:shiro-core:1.2.6' // Apache 2.0
    compile 'org.apache.shiro:shiro-web:1.2.6' // Apache 2.0

    // SLF4J, Log4J
    compile 'org.slf4j:slf4j-api:1.7.21'
    runtime 'org.apache.logging.log4j:log4j-core:2.6.2'
    runtime 'org.apache.logging.log4j:log4j-api:2.6.2'
    runtime 'org.apache.logging.log4j:log4j-slf4j-impl:2.6.2'

    // Apache XML-RPC (are all modules to not get dependencies which have conflicts)
    compile module('org.apache.xmlrpc:xmlrpc-client:3.1.3') // Apache 2.0
    compile module('org.apache.xmlrpc:xmlrpc-server:3.1.3') // Apache 2.0
    compile module('org.apache.xmlrpc:xmlrpc-common:3.1.3') // Apache 2.0
    compile module('org.apache.ws.commons.util:ws-commons-util:1.0.2') // Apache 2.0

    // Snake YAML
    compile 'org.yaml:snakeyaml:1.17' // Apache 2.0

    // Apache Jackrabbit - uncomment here or include elsewhere when Jackrabbit repository configurations are used
    // compile 'org.apache.jackrabbit:jackrabbit-jcr-rmi:2.12.1' // Apache 2.0
    // compile 'org.apache.jackrabbit:jackrabbit-jcr2dav:2.12.1' // Apache 2.0

    // Apache Commons JCS - Only needed when using JCSCacheToolFactory
    // compile 'org.apache.commons:commons-jcs-jcache:2.0-beta-1' // Apache 2.0

    // Liquibase (for future reference, not used yet)
    // compile 'org.liquibase:liquibase-core:3.4.2' // Apache 2.0

    // typescript4j: not currently used, may use in the future for transpiling TS to JS on the server
    // compile 'com.mangofactory:typescript4j:0.4.0'

    // ========== test dependencies ==========
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4' // Apache 2.0
    testCompile 'junit:junit:4.12' // Apache 2.0
    testCompile 'org.hamcrest:hamcrest-core:1.3' // BSD 3-Clause

    // ========== executable war dependencies ==========
    // Jetty
    execWarRuntime 'org.eclipse.jetty:jetty-server:9.3.10.v20160621' // Apache 2.0
    execWarRuntime 'org.eclipse.jetty:jetty-webapp:9.3.10.v20160621' // Apache 2.0
    execWarRuntime 'org.eclipse.jetty:jetty-jndi:9.3.10.v20160621' // Apache 2.0
    execWarRuntime module('org.eclipse.jetty.websocket:javax-websocket-server-impl:9.3.10.v20160621') // Apache 2.0
    execWarRuntime ('org.eclipse.jetty.websocket:javax-websocket-client-impl:9.3.10.v20160621') // Apache 2.0
    execWarRuntime ('org.eclipse.jetty.websocket:websocket-server:9.3.10.v20160621') // Apache 2.0
    // only include this if using Endpoint and MessageHandler annotations:
    // execWarRuntime ('org.eclipse.jetty:jetty-annotations:9.3.10.v20160621') // Apache 2.0
}

// setup task dependencies to make sure the start sourceSets always get run
compileJava.dependsOn startClasses
compileTestGroovy.dependsOn classes
sourceSets.test.compileClasspath += files(sourceSets.main.output.classesDir)

// by default the Java plugin runs test on build, change to not do that (only run test if explicit task)
check.dependsOn.remove(test)

test {
    systemProperty 'moqui.runtime', '../runtime'
    systemProperty 'moqui.conf', 'conf/MoquiDevTestConf.xml'
    systemProperty 'moqui.init.static', 'true'
    maxHeapSize = "512M"
    jvmArgs '-XX:MaxPermSize=192m'

    testLogging.showStandardStreams = true
    testLogging.showExceptions = true

    classpath += files(sourceSets.main.output.classesDir)
    classpath += files(projectDir.absolutePath)
    // filter out classpath entries that don't exist (gradle adds a bunch of these), or ElasticSearch JarHell will blow up
    classpath = classpath.filter { it.exists() }

    beforeTest { descriptor ->
        logger.lifecycle("Running test: ${descriptor}")
    }
}

jar {
    // this is necessary otherwise jar won't build when war plugin is applied
    enabled = true
    appendix = 'framework'
    manifest { attributes 'Implementation-Title': 'Moqui Framework', 'Implementation-Version': version }
    from sourceSets.main.output
    // get all of the "resources" that are in component-standard directories instead of src/main/resources
    from fileTree(dir: projectDir.absolutePath,
            includes: ['data/**', 'entity/**', 'screen/**', 'service/**', 'template/**', 'xsd/**'])
}

war {
    dependsOn jar
    // put the war file in the parent directory, ie the moqui dir instead of the framework dir
    destinationDir = projectDir.parentFile
    // add MoquiInit.properties to the WEB-INF/classes dir for the deployed war mode of operation
    from(fileTree(dir: destinationDir, includes: ['MoquiInit.properties'])) { into 'WEB-INF/classes' }
    // this excludes the classes in sourceSets.main.output (better to have the jar file built above)
    classpath = configurations.runtime - configurations.providedCompile
    classpath file(jar.archivePath)

    // put start classes and Jetty jars in the root of the war file for the executable war/jar mode of operation
    from sourceSets.start.output
    from(files(configurations.execWarRuntime)) { into 'execlib' }
    // TODO some sort of config for Jetty? from file(projectDir.absolutePath + '/jetty/jetty.xml')
    // setup the manifest for the executable war/jar mode
    manifest { attributes 'Implementation-Title': 'Moqui Start', 'Implementation-Vendor': 'Moqui Framework',
            'Implementation-Version': version, 'Main-Class': 'MoquiStart' }
}

task copyDependencies << {
    delete file(projectDir.absolutePath + '/dependencies')
    copy { from configurations.runtime; into file(projectDir.absolutePath + '/dependencies') }
    copy { from configurations.testCompile; into file(projectDir.absolutePath + '/dependencies') }
}
