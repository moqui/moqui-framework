/*
 * This software is in the public domain under CC0 1.0 Universal plus a
 * Grant of Patent License.
 *
 * To the extent possible under law, the author(s) have dedicated all
 * copyright and related and neighboring rights to this software to the
 * public domain worldwide. This software is distributed without any
 * warranty.
 *
 * You should have received a copy of the CC0 Public Domain Dedication
 * along with this software (see the LICENSE.md file). If not, see
 * <http://creativecommons.org/publicdomain/zero/1.0/>.
 */

tasks.withType(JavaCompile) { options.compilerArgs << "-Xlint:unchecked" }
tasks.withType(JavaCompile) { options.compilerArgs << "-Xlint:deprecation" }
tasks.withType(GroovyCompile) { options.compilerArgs << "-Xlint:unchecked" }
tasks.withType(GroovyCompile) { options.compilerArgs << "-Xlint:deprecation" }

version = '3.0.0-rc8'

apply plugin: 'java-library'
apply plugin: 'groovy'
apply plugin: 'war'
// to run gradle-versions-plugin use "gradle dependencyUpdates"
apply plugin: 'com.github.ben-manes.versions'
// uncomment to add the Error Prone compiler; not enabled by default (doesn't work on Travis CI)
// apply plugin: 'net.ltgt.errorprone'
buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.45.0'
        // uncomment to add the Error Prone compiler: classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.8'
    }
}
dependencyUpdates.resolutionStrategy = { componentSelection { rules -> rules.all { ComponentSelection selection ->
    boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'b'].any { qualifier -> selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-].*/ }
    if (rejected) selection.reject('Release candidate')
} } }

// NOTE: packages should match group, name, version found at https://bintray.com/bintray/jcenter
repositories {
    flatDir name: 'localLib', dirs: projectDir.absolutePath + '/lib'
    mavenCentral()
}

sourceCompatibility = '11'
targetCompatibility = '11'
archivesBaseName = 'moqui'

sourceSets {
    start
    execWar
}

groovydoc {
    docTitle = "Moqui Framework ${version}"
    source = sourceSets.main.allSource
}

// Log4J has annotation processors, disable to avoid warning
tasks.withType(JavaCompile) { options.compilerArgs << "-proc:none" }
tasks.withType(GroovyCompile) { options.compilerArgs << "-proc:none" }

dependencies {
    implementation project(':moqui-util')

    // Groovy
    // NOTE: Groovy 3.0.10-3.0.12 has a bug that somehow causes EntityDefinition.isViewEntity (public final boolean) to switch
    //     from true during constructor to false later on; see EntityFindBuilder.java:112-114 and EntityDefinition.groovy:50-53,94-95;
    //     for now using Boolean instead of boolean to resolve, but staying at 3.0.9 to avoid risk with other code
    api 'org.codehaus.groovy:groovy:3.0.22' // Apache 2.0
    api 'org.codehaus.groovy:groovy-dateutil:3.0.22' // Apache 2.0
    api 'org.codehaus.groovy:groovy-groovysh:3.0.22' // Apache 2.0
    // jline, an older version, is required by groovy-groovysh but not in its dependencies
    implementation 'jline:jline:2.14.6' // BSD
    api 'org.codehaus.groovy:groovy-json:3.0.22' // Apache 2.0
    api 'org.codehaus.groovy:groovy-templates:3.0.22' // Apache 2.0
    api 'org.codehaus.groovy:groovy-xml:3.0.22' // Apache 2.0

    // jansi is needed for groovydoc only, so in providedCompile (not included in war)
    compileOnly 'org.fusesource.jansi:jansi:1.18'
    // Findbugs need only during compile (used by freemarker and various moqui classes)
    compileOnly 'com.google.code.findbugs:annotations:3.0.1'

    // ========== Local (flatDir) libraries in framework/lib ==========

    // Bitronix Transaction Manager (the default internal tx mgr; custom build from source as 3.0.0 not yet released)
    implementation 'org.codehaus.btm:btm:3.0.0-SNAPSHOT' // Apache 2.0
    //  api 'org.codehaus.btm:btm:3.0.0-20161020' // Apache 2.0
    runtimeOnly 'org.javassist:javassist:3.29.2-GA' // Apache 2.0

    // ========== Libraries from jcenter ==========

    // Apache Commons
    api 'org.apache.commons:commons-csv:1.9.0' // Apache 2.0
    // NOTE: commons-email depends on com.sun.mail:javax.mail, included below, so use module() here to not get dependencies
    api module('org.apache.commons:commons-email:1.5') // Apache 2.0
    api 'org.apache.commons:commons-lang3:3.12.0' // Apache 2.0; used by cron-utils
    api 'commons-beanutils:commons-beanutils:1.9.4' // Apache 2.0
    api 'commons-codec:commons-codec:1.15' // Apache 2.0
    api 'commons-collections:commons-collections:3.2.2' // Apache 2.0
    api 'commons-digester:commons-digester:2.1' // Apache 2.0
    api 'commons-fileupload:commons-fileupload:1.5' // Apache 2.0
    api 'commons-io:commons-io:2.14.0' // Apache 2.0
    api 'commons-logging:commons-logging:1.2' // Apache 2.0
    api 'commons-validator:commons-validator:1.7' // Apache 2.0

    // Cron Utils
    implementation 'com.cronutils:cron-utils:9.2.0' // Apache 2.0

    // Flexmark (markdown)
    implementation 'com.vladsch.flexmark:flexmark:0.64.0'
    implementation 'com.vladsch.flexmark:flexmark-ext-tables:0.64.0'
    implementation 'com.vladsch.flexmark:flexmark-ext-toc:0.64.0'

    // Freemarker
    implementation 'org.freemarker:freemarker:2.3.32' // Apache 2.0

    // Java Specifications
    implementation 'javax.transaction:jta:1.1'
    implementation 'javax.cache:cache-api:1.1.1'
    implementation 'javax.jcr:jcr:2.0'
    // jaxb-api no longer included in Java 9 and later, also tested with openjdk-8
    implementation module('javax.xml.bind:jaxb-api:2.3.1') // CDDL 1.1
    // NOTE: javax.activation:javax.activation-api is required by jaxb-api, has classes same as old 2012 javax.activation:activation used by javax.mail
    // NOTE: as of Java 11 the com.sun packages no longer available so for javax.mail need full javax.activation jar (also includes javax.activation-api)
    implementation 'com.sun.activation:javax.activation:1.2.0' // CDDL 1.1
    // using websocket-api 1.0, don't update to 1.1 until used in Jetty, Tomcat, etc
    implementation 'javax.websocket:javax.websocket-api:1.1'
    providedCompile 'javax.servlet:javax.servlet-api:4.0.1'
    // Specs not needed by default:
    // implementation 'javax.resource:connector-api:1.5'
    // implementation 'javax.jms:jms:1.1'

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.2'

    // H2 Database
//    implementation 'com.h2database:h2:1.4.200' // MPL 2.0, EPL 1.0
    api 'com.h2database:h2:2.1.210' // MPL 2.0, EPL 1.0

    // PostgreSQL JDBC driver
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.2'

    // Jackson Databind (JSON, etc)
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.7.1'

    // Jetty HTTP Client and Proxy Servlet
    implementation 'org.eclipse.jetty:jetty-client:10.0.16' // Apache 2.0
    implementation 'org.eclipse.jetty:jetty-proxy:10.0.16' // Apache 2.0
    // NOTE: update after version 9.4.18.v20190429 results in 'IllegalArgumentException: URI is not hierarchical' error, have workarounds for now catching exception in MClassLoader.getResources()

    // javax.mail
    // NOTE: javax.mail depends on 'javax.activation:activation' which is the old package for 'javax.activation:javax.activation-api' used by jaxb-api
    implementation module('com.sun.mail:javax.mail:1.6.2') // CDDL

    // Joda Time (used by elasticsearch, aws)
    implementation 'joda-time:joda-time:2.10.14' // Apache 2.0

    // JSoup (HTML parser, cleaner)
    implementation 'org.jsoup:jsoup:1.15.3' // MIT

    // Apache Shiro
    implementation module('org.apache.shiro:shiro-core:1.13.0') // Apache 2.0
    implementation module('org.apache.shiro:shiro-web:1.13.0') // Apache 2.0

    // https://mvnrepository.com/artifact/org.apache.shiro/shiro-ehcache
    implementation group: 'org.apache.shiro', name: 'shiro-ehcache', version: '1.13.0'

    // https://mvnrepository.com/artifact/org.apache.directory.api/api-ldap-client-api
    implementation group: 'org.apache.directory.api', name: 'api-ldap-client-api', version: '2.1.2'

    // SLF4J, Log4j 2 (note Log4j 2 is used by various libraries, best not to replace it even if mostly possible with SLF4J)
    api 'org.slf4j:slf4j-api:2.0.7'

    // this works, logback-classic
    implementation 'ch.qos.logback:logback-classic:1.4.12'

    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    runtimeOnly 'org.apache.logging.log4j:log4j-jcl:2.20.0'
    runtimeOnly 'org.apache.logging.log4j:log4j-slf4j2-impl:2.20.0'

    // SubEtha SMTP (module as depends on old javax.mail location; also uses SLF4J, activation included elsewhere)
    implementation module('org.subethamail:subethasmtp:3.1.7')

    // Snake YAML
    implementation 'org.yaml:snakeyaml:2.0' // Apache 2.0

    // Apache Jackrabbit - uncomment here or include elsewhere when Jackrabbit repository configurations are used
    // implementation 'org.apache.jackrabbit:jackrabbit-jcr-rmi:2.12.1' // Apache 2.0
    // implementation 'org.apache.jackrabbit:jackrabbit-jcr2dav:2.12.1' // Apache 2.0

    // Apache Commons JCS - Only needed when using JCSCacheToolFactory
    // implementation 'org.apache.commons:commons-jcs-jcache:2.0-beta-1' // Apache 2.0

    // Liquibase (for future reference, not used yet)
    // implementation 'org.liquibase:liquibase-core:3.4.2' // Apache 2.0

    // Google GSON
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'

    // YAML
    implementation 'org.codehaus.groovy:groovy-yaml:3.0.2'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.14.2'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.14.2'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.14.2'

    // WebSocket
    implementation 'org.java-websocket:Java-WebSocket:1.5.3'

    // ========== test dependencies ==========
    // spock-core depends on groovy-all but we are including selected groovy modules, so don't get its dependencies
    testImplementation module('org.spockframework:spock-core:2.0-groovy-3.0') // Apache 2.0
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2' // Apache 2.0
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2' // Apache 2.0
    testImplementation 'org.junit.platform:junit-platform-runner:1.8.2' // Apache 2.0
    testImplementation 'org.junit.platform:junit-platform-suite:1.8.2' // Apache 2.0
    testImplementation 'org.hamcrest:hamcrest-core:2.2' // BSD 3-Clause

    // testing JSON
    testImplementation group: 'net.javacrumbs.json-unit', name: 'json-unit', version: '2.38.0'

    // ========== executable war dependencies ==========
    // Jetty
    execWarRuntimeOnly 'org.eclipse.jetty:jetty-server:10.0.16' // Apache 2.0
    execWarRuntimeOnly 'org.eclipse.jetty:jetty-webapp:10.0.16' // Apache 2.0
    execWarRuntimeOnly 'org.eclipse.jetty:jetty-jndi:10.0.16' // Apache 2.0
    execWarRuntimeOnly module('org.eclipse.jetty.websocket:javax-websocket-server-impl:9.4.51.v20230217') // Apache 2.0
    execWarRuntimeOnly ('org.eclipse.jetty.websocket:javax-websocket-client-impl:9.4.51.v20230217') { // Apache 2.0
        exclude group: 'javax.websocket' } // we have the full websocket API, including the client one causes problems
    execWarRuntimeOnly 'javax.websocket:javax.websocket-api:1.1'
    // using 1.0, don't update to 1.1 until used in Jetty, Tomcat, etc
    execWarRuntimeOnly ('org.eclipse.jetty.websocket:websocket-server:9.4.51.v20230217') // Apache 2.0
    // only include this if using Endpoint and MessageHandler annotations:
    // execWarRuntimeOnly ('org.eclipse.jetty:jetty-annotations:9.4.35.v20201120') // Apache 2.0
}

// setup task dependencies to make sure the start sourceSets always get run
compileJava.dependsOn startClasses
compileTestGroovy.dependsOn classes
sourceSets.test.compileClasspath += files(sourceSets.main.output.classesDirs)

// by default the Java plugin runs test on build, change to not do that (only run test if explicit task)
// no longer works as of gradle 4.8 or possibly earlier, use clear() instead: check.dependsOn.remove(test)
check.dependsOn.clear()

test {
    dependsOn cleanTest

    // comment out if you need to run specific tests
    // include '**/*MoquiSuite.class'

    useJUnitPlatform()

    systemProperty 'moqui.runtime', '../runtime'
    systemProperty 'moqui.conf', 'conf/MoquiDevConf.xml'
    systemProperty 'moqui.log.directory', 'log'
    systemProperty 'moqui.init.static', 'true'

    testLogging.showStandardStreams = true; testLogging.showExceptions = true

    classpath += files(sourceSets.main.output.classesDirs); classpath += files(projectDir.absolutePath)
    // filter out classpath entries that don't exist (gradle adds a bunch of these), or ElasticSearch JarHell will blow up
    classpath = classpath.filter { it.exists() }

    beforeTest { descriptor -> logger.lifecycle("Running test: ${descriptor}") }
}

jar {
    // this is necessary otherwise jar won't build when war plugin is applied
    enabled = true
    archiveBaseName = 'moqui-framework'
    manifest { attributes 'Implementation-Title': 'Moqui Framework', 'Implementation-Version': version, 'Implementation-Vendor': 'Moqui Ecosystem' }
    from sourceSets.main.output
    // get all of the "resources" that are in component-standard directories instead of src/main/resources
    from fileTree(dir: projectDir.absolutePath, includes: ['data/**', 'entity/**', 'screen/**', 'service/**', 'template/**']) // 'xsd/**'
}

war {
    dependsOn jar
    // put the war file in the parent directory, ie the moqui dir instead of the framework dir
    destinationDirectory = projectDir.parentFile
    archiveFileName = 'moqui.war'
    // add MoquiInit.properties to the WEB-INF/classes dir for the deployed war mode of operation
    from(fileTree(dir: destinationDir, includes: ['MoquiInit.properties'])) { into 'WEB-INF/classes' }
    // this excludes the classes in sourceSets.main.output (better to have the jar file built above)
    classpath = configurations.compileClasspath - configurations.providedCompile
    classpath file(jar.archivePath)

    // put start classes and Jetty jars in the root of the war file for the executable war/jar mode of operation
    from sourceSets.start.output
    from(files(configurations.execWarRuntimeOnly{canBeResolved(true)})) { into 'execlib' }
    // TODO some sort of config for Jetty? from file(projectDir.absolutePath + '/jetty/jetty.xml')
    // setup the manifest for the executable war/jar mode
    manifest { attributes 'Implementation-Title': 'Moqui Start', 'Implementation-Vendor': 'Moqui Ecosystem',
            'Implementation-Version': version, 'Main-Class': 'MoquiStart' }
}

task copyDependencies { doLast {
    delete file(projectDir.absolutePath + '/dependencies')
    copy { from configurations.runtimeOnly; into file(projectDir.absolutePath + '/dependencies') }
    copy { from configurations.testImplementation; into file(projectDir.absolutePath + '/dependencies') }
} }

tasks.each {task -> configure(task) {
    group = "moqui-framework"
}}