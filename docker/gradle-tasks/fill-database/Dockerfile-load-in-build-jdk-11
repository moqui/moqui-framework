# Builds a minimal docker image with openjdk and moqui with various volumes for configuration and persisted data outside the container
# NOTE: add components, build and if needed load data before building a docker image with this

FROM openjdk:11-jdk
ARG GRADLE_VERSION
ARG MOQUI_CONF
ARG PG_LOAD_SERVER
ENV GRADLE_HOME=/opt/gradle/gradle-${GRADLE_VERSION}
ENV PATH="/opt/gradle/gradle-${GRADLE_VERSION}/bin:${PATH}"
ENV PG_LOAD_SERVER=${PG_LOAD_SERVER}

# 2. build application, load data into database
RUN wget https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip -P /tmp
RUN mkdir /opt/gradle
RUN unzip -d /opt/gradle /tmp/gradle-${GRADLE_VERSION}-bin.zip
RUN ls -l /opt/gradle

WORKDIR /opt/moqui-source
# since we have build context set to MOQUI directory, we
# can easily copy all necessary files
COPY runtime runtime/.
COPY framework framework/.
COPY moqui-util moqui-util/.
COPY *.* ./

RUN gradle wrapper
RUN ./gradlew build
RUN ./gradlew load -Dmoqui.conf.dev=${MOQUI_CONF}

WORKDIR /opt/moqui
RUN cp /opt/moqui-source/moqui-plus-runtime.war .
RUN unzip moqui-plus-runtime.war

# Main Servlet Container Port
EXPOSE 80

# this is to run from the war file directly, preferred approach unzips war file in advance
ENTRYPOINT ["java", "-cp", ".", "MoquiStart", "port=80"]

HEALTHCHECK --interval=30s --timeout=600ms --start-period=120s CMD curl -f -H "X-Forwarded-Proto: https" -H "X-Forwarded-Ssl: on" http://localhost/status || exit 1
# specify this as a default parameter if none are specified with docker exec/run, ie run production by default
CMD ["conf=conf/MoquiTestConf.xml"]
